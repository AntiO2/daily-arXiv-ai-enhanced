{"id": "2510.15368", "categories": ["cs.DB"], "pdf": "https://arxiv.org/pdf/2510.15368", "abs": "https://arxiv.org/abs/2510.15368", "authors": ["Renrui Li", "Qingzhi Ma", "Jiajie Xu", "Lei Zhao", "An Liu"], "title": "TKHist: Cardinality Estimation for Join Queries via Histograms with Dominant Attribute Correlation Finding", "comment": "CIKM2025", "summary": "Cardinality estimation has long been crucial for cost-based database\noptimizers in identifying optimal query execution plans, attracting significant\nattention over the past decades. While recent advancements have significantly\nimproved the accuracy of multi-table join query estimations, these methods\nintroduce challenges such as higher space overhead, increased latency, and\ngreater complexity, especially when integrated with the binary join framework.\nIn this paper, we introduce a novel cardinality estimation method named TKHist,\nwhich addresses these challenges by relaxing the uniformity assumption in\nhistograms. TKHist captures bin-wise non-uniformity information, enabling\naccurate cardinality estimation for join queries without filter predicates.\nFurthermore, we explore the attribute independent assumption, which can lead to\nsignificant over-estimation rather than under-estimation in multi-table join\nqueries. To address this issue, we propose the dominating join path correlation\ndiscovery algorithm to highlight and manage correlations between join keys and\nfilter predicates. Our extensive experiments on popular benchmarks demonstrate\nthat TKHist reduces error variance by 2-3 orders of magnitude compared to SOTA\nmethods, while maintaining comparable or lower memory usage.", "AI": {"tldr": "TKHist\u662f\u4e00\u79cd\u65b0\u9896\u7684\u57fa\u6570\u4f30\u8ba1\u65b9\u6cd5\uff0c\u901a\u8fc7\u653e\u5bbd\u76f4\u65b9\u56fe\u7684\u5747\u5300\u6027\u5047\u8bbe\u6765\u6539\u8fdb\u591a\u8868\u8fde\u63a5\u67e5\u8be2\u7684\u57fa\u6570\u4f30\u8ba1\uff0c\u540c\u65f6\u63d0\u51fa\u4e3b\u5bfc\u8fde\u63a5\u8def\u5f84\u76f8\u5173\u6027\u53d1\u73b0\u7b97\u6cd5\u6765\u5904\u7406\u8fde\u63a5\u952e\u4e0e\u8fc7\u6ee4\u8c13\u8bcd\u4e4b\u95f4\u7684\u76f8\u5173\u6027\u3002", "motivation": "\u73b0\u6709\u7684\u591a\u8868\u8fde\u63a5\u67e5\u8be2\u57fa\u6570\u4f30\u8ba1\u65b9\u6cd5\u867d\u7136\u63d0\u9ad8\u4e86\u51c6\u786e\u6027\uff0c\u4f46\u5e26\u6765\u4e86\u66f4\u9ad8\u7684\u7a7a\u95f4\u5f00\u9500\u3001\u5ef6\u8fdf\u548c\u590d\u6742\u6027\uff0c\u7279\u522b\u662f\u5728\u4e0e\u4e8c\u5143\u8fde\u63a5\u6846\u67b6\u96c6\u6210\u65f6\u3002", "method": "TKHist\u901a\u8fc7\u6355\u83b7\u5206\u7bb1\u975e\u5747\u5300\u6027\u4fe1\u606f\u6765\u51c6\u786e\u4f30\u8ba1\u65e0\u8fc7\u6ee4\u8c13\u8bcd\u7684\u8fde\u63a5\u67e5\u8be2\u57fa\u6570\uff0c\u5e76\u63d0\u51fa\u4e3b\u5bfc\u8fde\u63a5\u8def\u5f84\u76f8\u5173\u6027\u53d1\u73b0\u7b97\u6cd5\u6765\u7ba1\u7406\u8fde\u63a5\u952e\u4e0e\u8fc7\u6ee4\u8c13\u8bcd\u4e4b\u95f4\u7684\u76f8\u5173\u6027\u3002", "result": "\u5728\u6d41\u884c\u57fa\u51c6\u6d4b\u8bd5\u4e0a\u7684\u5e7f\u6cdb\u5b9e\u9a8c\u8868\u660e\uff0cTKHist\u76f8\u6bd4\u6700\u5148\u8fdb\u65b9\u6cd5\u5c06\u8bef\u5dee\u65b9\u5dee\u964d\u4f4e\u4e862-3\u4e2a\u6570\u91cf\u7ea7\uff0c\u540c\u65f6\u4fdd\u6301\u76f8\u5f53\u6216\u66f4\u4f4e\u7684\u5185\u5b58\u4f7f\u7528\u3002", "conclusion": "TKHist\u5728\u4fdd\u6301\u4f4e\u5185\u5b58\u4f7f\u7528\u7684\u540c\u65f6\u663e\u8457\u63d0\u9ad8\u4e86\u57fa\u6570\u4f30\u8ba1\u7684\u51c6\u786e\u6027\uff0c\u89e3\u51b3\u4e86\u73b0\u6709\u65b9\u6cd5\u5728\u7a7a\u95f4\u5f00\u9500\u548c\u590d\u6742\u6027\u65b9\u9762\u7684\u6311\u6218\u3002"}}
{"id": "2510.15445", "categories": ["cs.DB"], "pdf": "https://arxiv.org/pdf/2510.15445", "abs": "https://arxiv.org/abs/2510.15445", "authors": ["Gregory", "Weintraub"], "title": "Optimizing Data Lakes' Queries", "comment": null, "summary": "Cloud data lakes provide a modern solution for managing large volumes of\ndata. The fundamental principle behind these systems is the separation of\ncompute and storage layers. In this architecture, inexpensive cloud storage is\nutilized for data storage, while compute engines are employed to perform\nanalytics on this data in an \"on-demand\" mode. However, to execute any\ncalculations on the data, it must be transferred from the storage layer to the\ncompute layer over the network for each query. This transfer can negatively\nimpact calculation performance and requires significant network bandwidth. In\nthis thesis, we examine various strategies to enhance query performance within\na cloud data lake architecture. We begin by formalizing the problem and\nproposing a straightforward yet robust theoretical framework that clearly\noutlines the associated trade-offs. Central to our framework is the concept of\na \"query coverage set,\" which is defined as the collection of files that need\nto be accessed from storage to fulfill a specific query. Our objective is to\nidentify the minimal coverage set for each query and execute the query\nexclusively on this subset of files. This approach enables us to significantly\nimprove query performance.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u5728\u4e91\u6570\u636e\u6e56\u4e2d\u4f18\u5316\u67e5\u8be2\u6027\u80fd\u7684\u65b9\u6cd5\uff0c\u901a\u8fc7\u8bc6\u522b\u67e5\u8be2\u7684\u6700\u5c0f\u8986\u76d6\u6587\u4ef6\u96c6\u6765\u51cf\u5c11\u7f51\u7edc\u6570\u636e\u4f20\u8f93\u3002", "motivation": "\u4e91\u6570\u636e\u6e56\u91c7\u7528\u8ba1\u7b97\u4e0e\u5b58\u50a8\u5206\u79bb\u67b6\u6784\uff0c\u6bcf\u6b21\u67e5\u8be2\u90fd\u9700\u8981\u901a\u8fc7\u7f51\u7edc\u4f20\u8f93\u6570\u636e\uff0c\u8fd9\u4f1a\u964d\u4f4e\u8ba1\u7b97\u6027\u80fd\u5e76\u6d88\u8017\u5927\u91cf\u7f51\u7edc\u5e26\u5bbd\u3002", "method": "\u5efa\u7acb\u7406\u8bba\u6846\u67b6\uff0c\u5f15\u5165'\u67e5\u8be2\u8986\u76d6\u96c6'\u6982\u5ff5\uff0c\u8bc6\u522b\u6bcf\u4e2a\u67e5\u8be2\u9700\u8981\u8bbf\u95ee\u7684\u6700\u5c0f\u6587\u4ef6\u96c6\u5408\uff0c\u5e76\u4ec5\u5728\u8be5\u5b50\u96c6\u4e0a\u6267\u884c\u67e5\u8be2\u3002", "result": "\u901a\u8fc7\u6700\u5c0f\u5316\u9700\u8981\u4ece\u5b58\u50a8\u5c42\u4f20\u8f93\u5230\u8ba1\u7b97\u5c42\u7684\u6587\u4ef6\u6570\u91cf\uff0c\u663e\u8457\u63d0\u5347\u4e86\u67e5\u8be2\u6027\u80fd\u3002", "conclusion": "\u63d0\u51fa\u7684\u67e5\u8be2\u8986\u76d6\u96c6\u65b9\u6cd5\u80fd\u6709\u6548\u89e3\u51b3\u4e91\u6570\u636e\u6e56\u67b6\u6784\u4e2d\u7684\u7f51\u7edc\u4f20\u8f93\u74f6\u9888\u95ee\u9898\uff0c\u4e3a\u67e5\u8be2\u6027\u80fd\u4f18\u5316\u63d0\u4f9b\u4e86\u7406\u8bba\u57fa\u7840\u3002"}}
{"id": "2510.15485", "categories": ["cs.DC", "cs.DB", "cs.SY", "eess.SY"], "pdf": "https://arxiv.org/pdf/2510.15485", "abs": "https://arxiv.org/abs/2510.15485", "authors": ["D\u0101vis Ka\u017eemaks", "Laurens Versluis", "Burcu Kulahcioglu Ozkan", "J\u00e9r\u00e9mie Decouchant"], "title": "Balancing Fairness and Performance in Multi-User Spark Workloads with Dynamic Scheduling (extended version)", "comment": "This paper is an extended version of a paper accepted at the ACM\n  Symposium on Cloud Computing (SoCC'25) that contains a proof of correctness", "summary": "Apache Spark is a widely adopted framework for large-scale data processing.\nHowever, in industrial analytics environments, Spark's built-in schedulers,\nsuch as FIFO and fair scheduling, struggle to maintain both user-level fairness\nand low mean response time, particularly in long-running shared applications.\nExisting solutions typically focus on job-level fairness which unintentionally\nfavors users who submit more jobs. Although Spark offers a built-in fair\nscheduler, it lacks adaptability to dynamic user workloads and may degrade\noverall job performance. We present the User Weighted Fair Queuing (UWFQ)\nscheduler, designed to minimize job response times while ensuring equitable\nresource distribution across users and their respective jobs. UWFQ simulates a\nvirtual fair queuing system and schedules jobs based on their estimated finish\ntimes under a bounded fairness model. To further address task skew and reduce\npriority inversions, which are common in Spark workloads, we introduce runtime\npartitioning, a method that dynamically refines task granularity based on\nexpected runtime. We implement UWFQ within the Spark framework and evaluate its\nperformance using multi-user synthetic workloads and Google cluster traces. We\nshow that UWFQ reduces the average response time of small jobs by up to 74%\ncompared to existing built-in Spark schedulers and to state-of-the-art fair\nscheduling algorithms.", "AI": {"tldr": "\u63d0\u51fa\u4e86UWFQ\u8c03\u5ea6\u5668\uff0c\u901a\u8fc7\u865a\u62df\u516c\u5e73\u961f\u5217\u7cfb\u7edf\u548c\u8fd0\u884c\u65f6\u5206\u533a\u6280\u672f\uff0c\u5728Spark\u4e2d\u5b9e\u73b0\u7528\u6237\u7ea7\u516c\u5e73\u8c03\u5ea6\uff0c\u663e\u8457\u964d\u4f4e\u5c0f\u4f5c\u4e1a\u54cd\u5e94\u65f6\u95f4\u3002", "motivation": "Spark\u5185\u7f6e\u8c03\u5ea6\u5668\u5728\u5de5\u4e1a\u5206\u6790\u73af\u5883\u4e2d\u96be\u4ee5\u540c\u65f6\u4fdd\u8bc1\u7528\u6237\u7ea7\u516c\u5e73\u6027\u548c\u4f4e\u54cd\u5e94\u65f6\u95f4\uff0c\u73b0\u6709\u89e3\u51b3\u65b9\u6848\u504f\u5411\u63d0\u4ea4\u66f4\u591a\u4f5c\u4e1a\u7684\u7528\u6237\uff0c\u516c\u5e73\u8c03\u5ea6\u5668\u7f3a\u4e4f\u5bf9\u52a8\u6001\u7528\u6237\u5de5\u4f5c\u8d1f\u8f7d\u7684\u9002\u5e94\u6027\u3002", "method": "\u8bbe\u8ba1UWFQ\u8c03\u5ea6\u5668\uff0c\u6a21\u62df\u865a\u62df\u516c\u5e73\u961f\u5217\u7cfb\u7edf\uff0c\u57fa\u4e8e\u6709\u754c\u516c\u5e73\u6a21\u578b\u6309\u4f30\u8ba1\u5b8c\u6210\u65f6\u95f4\u8c03\u5ea6\u4f5c\u4e1a\uff1b\u5f15\u5165\u8fd0\u884c\u65f6\u5206\u533a\u6280\u672f\u52a8\u6001\u8c03\u6574\u4efb\u52a1\u7c92\u5ea6\u4ee5\u51cf\u5c11\u4efb\u52a1\u503e\u659c\u548c\u4f18\u5148\u7ea7\u53cd\u8f6c\u3002", "result": "UWFQ\u5728Spark\u6846\u67b6\u4e2d\u5b9e\u73b0\uff0c\u4f7f\u7528\u591a\u7528\u6237\u5408\u6210\u5de5\u4f5c\u8d1f\u8f7d\u548cGoogle\u96c6\u7fa4\u8ddf\u8e2a\u8fdb\u884c\u8bc4\u4f30\uff0c\u76f8\u6bd4\u73b0\u6709Spark\u8c03\u5ea6\u5668\u548c\u5148\u8fdb\u516c\u5e73\u8c03\u5ea6\u7b97\u6cd5\uff0c\u5c0f\u4f5c\u4e1a\u5e73\u5747\u54cd\u5e94\u65f6\u95f4\u6700\u591a\u964d\u4f4e74%\u3002", "conclusion": "UWFQ\u8c03\u5ea6\u5668\u80fd\u6709\u6548\u5e73\u8861\u7528\u6237\u516c\u5e73\u6027\u548c\u4f5c\u4e1a\u6027\u80fd\uff0c\u663e\u8457\u6539\u5584Spark\u5728\u591a\u7528\u6237\u73af\u5883\u4e2d\u7684\u8c03\u5ea6\u6548\u7387\u3002"}}
{"id": "2510.15004", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.15004", "abs": "https://arxiv.org/abs/2510.15004", "authors": ["Zhiming Zhang", "Qingfu Zhu", "Xianzhen Luo", "Yixuan Wang", "Bohan Li", "Wanxiang Che"], "title": "Automated Snippet-Alignment Data Augmentation for Code Translation", "comment": null, "summary": "Code translation aims to translate the code from its source language to the\ntarget language and is used in various software development scenarios. Recent\ndevelopments in Large Language Models (LLMs) have showcased their capabilities\nin code translation, and parallel corpora play a crucial role in training\nmodels for code translation. Parallel corpora can be categorized into\nprogram-alignment (PA) and snippet-alignment (SA) data. Although PA data has\ncomplete context and is suitable for semantic alignment learning, it may not\nprovide adequate fine-grained training signals due to its extended length,\nwhile the brevity of SA data enables more fine-grained alignment learning. Due\nto limited parallel corpora, researchers explore several augmentation methods\nfor code translation. Previous studies mainly focus on augmenting PA data. In\nthis paper, we propose a data augmentation method that leverages LLMs to\ngenerate SA data automatically. To fully leverage both PA data and SA data, we\nexplore a simple yet effective two-stage training strategy, which consistently\nenhances model performance compared to fine-tuning solely on PA data.\nExperiments on TransCoder-test demonstrate that our augmented SA data combined\nwith the two-stage training approach yields consistent improvements over the\nbaseline, achieving a maximum gain of 3.78% on pass@k.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u5229\u7528LLM\u81ea\u52a8\u751f\u6210\u4ee3\u7801\u7247\u6bb5\u5bf9\u9f50\u6570\u636e\u7684\u6570\u636e\u589e\u5f3a\u65b9\u6cd5\uff0c\u5e76\u91c7\u7528\u4e24\u9636\u6bb5\u8bad\u7ec3\u7b56\u7565\uff0c\u5728TransCoder\u6d4b\u8bd5\u96c6\u4e0a\u83b7\u5f97\u6700\u9ad83.78%\u7684\u6027\u80fd\u63d0\u5347\u3002", "motivation": "\u4ee3\u7801\u7ffb\u8bd1\u9700\u8981\u5e73\u884c\u8bed\u6599\u5e93\uff0c\u4f46\u73b0\u6709\u5e73\u884c\u8bed\u6599\u6709\u9650\u3002\u7a0b\u5e8f\u5bf9\u9f50\u6570\u636e\u867d\u7136\u4e0a\u4e0b\u6587\u5b8c\u6574\u4f46\u957f\u5ea6\u8fc7\u957f\uff0c\u7247\u6bb5\u5bf9\u9f50\u6570\u636e\u66f4\u7cbe\u7ec6\u4f46\u6570\u91cf\u4e0d\u8db3\u3002", "method": "\u5229\u7528LLM\u81ea\u52a8\u751f\u6210\u7247\u6bb5\u5bf9\u9f50\u6570\u636e\uff0c\u5e76\u8bbe\u8ba1\u4e24\u9636\u6bb5\u8bad\u7ec3\u7b56\u7565\uff1a\u5148\u5728\u7a0b\u5e8f\u5bf9\u9f50\u6570\u636e\u4e0a\u8bad\u7ec3\uff0c\u518d\u5728\u7247\u6bb5\u5bf9\u9f50\u6570\u636e\u4e0a\u5fae\u8c03\u3002", "result": "\u5728TransCoder\u6d4b\u8bd5\u96c6\u4e0a\uff0c\u589e\u5f3a\u7684\u7247\u6bb5\u5bf9\u9f50\u6570\u636e\u7ed3\u5408\u4e24\u9636\u6bb5\u8bad\u7ec3\u76f8\u6bd4\u4ec5\u5728\u7a0b\u5e8f\u5bf9\u9f50\u6570\u636e\u4e0a\u5fae\u8c03\u7684\u57fa\u7ebf\u6709\u6301\u7eed\u6539\u8fdb\uff0c\u6700\u9ad8\u63d0\u53473.78%\u7684pass@k\u6307\u6807\u3002", "conclusion": "\u901a\u8fc7LLM\u751f\u6210\u7247\u6bb5\u5bf9\u9f50\u6570\u636e\u5e76\u7ed3\u5408\u4e24\u9636\u6bb5\u8bad\u7ec3\u7b56\u7565\uff0c\u80fd\u6709\u6548\u63d0\u5347\u4ee3\u7801\u7ffb\u8bd1\u6a21\u578b\u7684\u6027\u80fd\uff0c\u8bc1\u660e\u4e86\u6570\u636e\u589e\u5f3a\u548c\u8bad\u7ec3\u7b56\u7565\u7684\u91cd\u8981\u6027\u3002"}}
{"id": "2510.15095", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.15095", "abs": "https://arxiv.org/abs/2510.15095", "authors": ["Md Sabbir Hossain Polak", "David Troendle", "Byunghyun Jang"], "title": "Hive Hash Table: A Warp-Cooperative, Dynamically Resizable Hash Table for GPUs", "comment": null, "summary": "Hash tables are essential building blocks in data-intensive applications, yet\nexisting GPU implementations often struggle with concurrent updates, high load\nfactors, and irregular memory access patterns. We present Hive hash table, a\nhigh-performance, warp-cooperative and dynamically resizable GPU hash table\nthat adapts to varying workloads without global rehashing.\n  Hive hash table makes three key contributions. First, a cache-aligned packed\nbucket layout stores key-value pairs as 64-bit words, enabling coalesced memory\naccess and atomic updates via single-CAS operations. Second, warp-synchronous\nconcurrency protocols - Warp-Aggregated-Bitmask-Claim (WABC) and\nWarp-Cooperative Match-and-Elect (WCME) - reduce contention to one atomic\noperation per warp while ensuring lock-free progress. Third, a\nload-factor-aware dynamic resizing strategy expands or contracts capacity in\nwarp-parallel K-bucket batches using linear hashing, maintaining balanced\noccupancy. To handle insertions under heavy contention, Hive hash table employs\na four-step strategy: replace, claim-and-commit, bounded cuckoo eviction, and\noverflow-stash fallback. This design provides lock-free fast paths and bounded\nrecovery cost under contention determined by a fixed eviction depth, while\neliminating ABA hazards during concurrent updates.\n  Experimental evaluation on an NVIDIA RTX 4090 shows Hive hash table sustains\nload factors up to 95% while delivering 1.5-2x higher throughput than\nstate-of-the-art GPU hash tables (Slab-Hash, DyCuckoo, WarpCore) under mixed\ninsert-delete-lookup workloads. On balanced workload, Hive hash table reaches\n3.5 billion updates/s and nearly 4 billion lookups/s, demonstrating scalability\nand efficiency for GPU-accelerated data processing.", "AI": {"tldr": "Hive\u54c8\u5e0c\u8868\u662f\u4e00\u79cd\u9ad8\u6027\u80fd\u3001\u652f\u6301\u52a8\u6001\u8c03\u6574\u5927\u5c0f\u7684GPU\u54c8\u5e0c\u8868\uff0c\u901a\u8fc7\u7f13\u5b58\u5bf9\u9f50\u7684\u6876\u5e03\u5c40\u3001warp\u540c\u6b65\u5e76\u53d1\u534f\u8bae\u548c\u8d1f\u8f7d\u611f\u77e5\u52a8\u6001\u8c03\u6574\u7b56\u7565\uff0c\u5728\u4fdd\u630195%\u9ad8\u8d1f\u8f7d\u56e0\u5b50\u7684\u540c\u65f6\uff0c\u6bd4\u73b0\u6709GPU\u54c8\u5e0c\u8868\u6027\u80fd\u63d0\u53471.5-2\u500d\u3002", "motivation": "\u73b0\u6709GPU\u54c8\u5e0c\u8868\u5b9e\u73b0\u96be\u4ee5\u5904\u7406\u5e76\u53d1\u66f4\u65b0\u3001\u9ad8\u8d1f\u8f7d\u56e0\u5b50\u548c\u4e0d\u89c4\u5219\u5185\u5b58\u8bbf\u95ee\u6a21\u5f0f\u7684\u95ee\u9898\uff0c\u9700\u8981\u8bbe\u8ba1\u4e00\u79cd\u80fd\u591f\u9002\u5e94\u4e0d\u540c\u5de5\u4f5c\u8d1f\u8f7d\u4e14\u65e0\u9700\u5168\u5c40\u91cd\u54c8\u5e0c\u7684\u9ad8\u6027\u80fd\u89e3\u51b3\u65b9\u6848\u3002", "method": "\u91c7\u7528\u7f13\u5b58\u5bf9\u9f50\u7684\u6253\u5305\u6876\u5e03\u5c40\u5b58\u50a8\u952e\u503c\u5bf9\uff1b\u4f7f\u7528WABC\u548cWCME\u4e24\u79cdwarp\u540c\u6b65\u5e76\u53d1\u534f\u8bae\u51cf\u5c11\u7ade\u4e89\uff1b\u57fa\u4e8e\u8d1f\u8f7d\u56e0\u5b50\u7684\u52a8\u6001\u8c03\u6574\u7b56\u7565\u4f7f\u7528\u7ebf\u6027\u54c8\u5e0c\u8fdb\u884c\u5bb9\u91cf\u6269\u5c55/\u6536\u7f29\uff1b\u56db\u6b65\u63d2\u5165\u7b56\u7565\u5904\u7406\u9ad8\u7ade\u4e89\u60c5\u51b5\u3002", "result": "\u5728NVIDIA RTX 4090\u4e0a\u7684\u5b9e\u9a8c\u663e\u793a\uff0cHive\u54c8\u5e0c\u8868\u5728\u6df7\u5408\u63d2\u5165-\u5220\u9664-\u67e5\u8be2\u5de5\u4f5c\u8d1f\u8f7d\u4e0b\uff0c\u541e\u5410\u91cf\u6bd4\u6700\u5148\u8fdb\u7684GPU\u54c8\u5e0c\u8868\u9ad81.5-2\u500d\uff0c\u5728\u5e73\u8861\u5de5\u4f5c\u8d1f\u8f7d\u4e0b\u8fbe\u523035\u4ebf\u6b21\u66f4\u65b0/\u79d2\u548c\u8fd140\u4ebf\u6b21\u67e5\u8be2/\u79d2\u3002", "conclusion": "Hive\u54c8\u5e0c\u8868\u901a\u8fc7\u521b\u65b0\u7684\u8bbe\u8ba1\u5b9e\u73b0\u4e86\u9ad8\u8d1f\u8f7d\u56e0\u5b50\u4e0b\u7684\u4f18\u5f02\u6027\u80fd\uff0c\u4e3aGPU\u52a0\u901f\u6570\u636e\u5904\u7406\u63d0\u4f9b\u4e86\u53ef\u6269\u5c55\u4e14\u9ad8\u6548\u7684\u54c8\u5e0c\u8868\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2510.15079", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.15079", "abs": "https://arxiv.org/abs/2510.15079", "authors": ["Changshu Liu", "Yang Chen", "Reyhaneh Jabbarvand"], "title": "Assessing Coherency and Consistency of Code Execution Reasoning by Large Language Models", "comment": null, "summary": "This paper proposes CES, a task to evaluate the abilities of LLMs in\nsimulating program execution and using that reasoning in programming tasks.\nBesides measuring the correctness of variable predictions during execution\nsimulation, CES introduces the notion of coherence to determine whether the\nsimulation complies with commonsense execution logic, even if the predicted\nvalues along the simulations are incorrect. This enables CES to rule out\nsuspiciously correct output predictions due to reasoning shortcuts,\nhallucinations, or potential data leakage. CES also introduces a novel metric\nto measure reasoning consistency across tests with the same or different prime\npath coverage in a spectrum: strong, weak, and random. Evaluating 16 LLMs\n(including three reasoning LLMs) using CES indicates 81.42% coherent execution\nsimulation on HumanEval, 46.92% and 53.08% of which result in correct and\nincorrect output predictions. Frontier LLMs such as GPT-4 and DeepSeek-R1 have\nthe most incoherent execution reasoning, mostly due to natural language\nshortcuts. Despite relatively coherent execution simulation, LLMs' reasoning\nperformance across different tests is inconsistent, mostly random (48.87%) or\nweak (45.37%), potentially explaining their weakness in programming tasks that\nrequire path-sensitive program analysis to succeed. We also compare CES with\nbug prediction/localization/repair, which intuitively requires control- and\ndata-flow awareness. We observe that LLMs barely incorporate execution\nreasoning into their analysis for bug-related tasks, and their success is\nprimarily due to inherent abilities in pattern matching or natural language\nshortcuts, if not data leakage. Without reasoning, there is a threat to the\ngeneralizability of LLMs in dealing with unseen bugs or patterns in different\ncontexts. CES can be used to vet the suspicious success of LLMs in these tasks\nsystematically.", "AI": {"tldr": "CES\u662f\u4e00\u4e2a\u8bc4\u4f30LLM\u7a0b\u5e8f\u6267\u884c\u6a21\u62df\u80fd\u529b\u7684\u4efb\u52a1\uff0c\u5f15\u5165\u8fde\u8d2f\u6027\u6982\u5ff5\u6765\u68c0\u6d4b\u63a8\u7406\u903b\u8f91\u4e00\u81f4\u6027\uff0c\u53d1\u73b0\u524d\u6cbfLLM\u5b58\u5728\u5927\u91cf\u4e0d\u8fde\u8d2f\u7684\u6267\u884c\u63a8\u7406\uff0c\u4e3b\u8981\u7531\u4e8e\u81ea\u7136\u8bed\u8a00\u6377\u5f84\u3002", "motivation": "\u8bc4\u4f30LLM\u5728\u7f16\u7a0b\u4efb\u52a1\u4e2d\u6a21\u62df\u7a0b\u5e8f\u6267\u884c\u7684\u80fd\u529b\uff0c\u6392\u9664\u56e0\u63a8\u7406\u6377\u5f84\u3001\u5e7b\u89c9\u6216\u6570\u636e\u6cc4\u9732\u5bfc\u81f4\u7684\u865a\u5047\u6b63\u786e\u9884\u6d4b\uff0c\u7cfb\u7edf\u68c0\u9a8cLLM\u5728bug\u76f8\u5173\u4efb\u52a1\u4e2d\u7684\u53ef\u7591\u6210\u529f\u3002", "method": "\u63d0\u51faCES\u4efb\u52a1\uff0c\u901a\u8fc7\u6d4b\u91cf\u6267\u884c\u6a21\u62df\u4e2d\u53d8\u91cf\u9884\u6d4b\u7684\u6b63\u786e\u6027\u548c\u8fde\u8d2f\u6027\uff0c\u5f15\u5165\u65b0\u7684\u5ea6\u91cf\u6807\u51c6\u8bc4\u4f30\u4e0d\u540c\u6d4b\u8bd5\u7528\u4f8b\u4e0b\u7684\u63a8\u7406\u4e00\u81f4\u6027\uff08\u5f3a\u3001\u5f31\u3001\u968f\u673a\uff09\u3002", "result": "\u5728HumanEval\u4e0a\uff0c81.42%\u7684\u6267\u884c\u6a21\u62df\u662f\u8fde\u8d2f\u7684\uff0c\u5176\u4e2d46.92%\u9884\u6d4b\u6b63\u786e\uff0c53.08%\u9884\u6d4b\u9519\u8bef\u3002GPT-4\u548cDeepSeek-R1\u7b49\u524d\u6cbfLLM\u5b58\u5728\u6700\u591a\u4e0d\u8fde\u8d2f\u6267\u884c\u63a8\u7406\u3002LLM\u7684\u63a8\u7406\u6027\u80fd\u5927\u591a\u4e3a\u968f\u673a\uff0848.87%\uff09\u6216\u5f31\u4e00\u81f4\uff0845.37%\uff09\u3002", "conclusion": "LLM\u5728bug\u9884\u6d4b/\u5b9a\u4f4d/\u4fee\u590d\u4efb\u52a1\u4e2d\u57fa\u672c\u672a\u878d\u5165\u6267\u884c\u63a8\u7406\uff0c\u6210\u529f\u4e3b\u8981\u4f9d\u8d56\u6a21\u5f0f\u5339\u914d\u6216\u81ea\u7136\u8bed\u8a00\u6377\u5f84\u3002\u7f3a\u4e4f\u63a8\u7406\u80fd\u529b\u4f1a\u5a01\u80c1LLM\u5904\u7406\u672a\u89c1bug\u6216\u4e0d\u540c\u4e0a\u4e0b\u6587\u6a21\u5f0f\u7684\u6cdb\u5316\u80fd\u529b\u3002"}}
{"id": "2510.15122", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.15122", "abs": "https://arxiv.org/abs/2510.15122", "authors": ["Fran\u00e7ois Ezard", "Can Umut Ileri", "J\u00e9r\u00e9mie Decouchant"], "title": "NEMO: Faster Parallel Execution for Highly Contended Blockchain Workloads (Full version)", "comment": "This is the full version of a paper that will appear at the 7th\n  Conference on Blockchain Research & Applications for Innovative Networks and\n  Services (BRAINS 2025)", "summary": "Following the design of more efficient blockchain consensus algorithms, the\nexecution layer has emerged as the new performance bottleneck of blockchains,\nespecially under high contention. Current parallel execution frameworks either\nrely on optimistic concurrency control (OCC) or on pessimistic concurrency\ncontrol (PCC), both of which see their performance decrease when workloads are\nhighly contended, albeit for different reasons. In this work, we present NEMO,\na new blockchain execution engine that combines OCC with the object data model\nto address this challenge. NEMO introduces four core innovations: (i) a greedy\ncommit rule for transactions using only owned objects; (ii) refined handling of\ndependencies to reduce re-executions; (iii) the use of incomplete but\nstatically derivable read/write hints to guide execution; and (iv) a\npriority-based scheduler that favors transactions that unblock others. Through\nsimulated execution experiments, we demonstrate that NEMO significantly reduces\nredundant computation and achieves higher throughput than representative\napproaches. For example, with 16 workers NEMO's throughput is up to 42% higher\nthan the one of Block-STM, the state-of-the-art OCC approach, and 61% higher\nthan the pessimistic concurrency control baseline used.", "AI": {"tldr": "NEMO\u662f\u4e00\u4e2a\u65b0\u7684\u533a\u5757\u94fe\u6267\u884c\u5f15\u64ce\uff0c\u7ed3\u5408\u4e50\u89c2\u5e76\u53d1\u63a7\u5236(OCC)\u548c\u5bf9\u8c61\u6570\u636e\u6a21\u578b\u6765\u89e3\u51b3\u9ad8\u7ade\u4e89\u8d1f\u8f7d\u4e0b\u7684\u6027\u80fd\u74f6\u9888\u95ee\u9898\u3002", "motivation": "\u968f\u7740\u533a\u5757\u94fe\u5171\u8bc6\u7b97\u6cd5\u7684\u6548\u7387\u63d0\u5347\uff0c\u6267\u884c\u5c42\u5df2\u6210\u4e3a\u65b0\u7684\u6027\u80fd\u74f6\u9888\uff0c\u7279\u522b\u662f\u5728\u9ad8\u7ade\u4e89\u573a\u666f\u4e0b\u3002\u73b0\u6709\u7684\u5e76\u884c\u6267\u884c\u6846\u67b6\uff08\u4e50\u89c2\u6216\u60b2\u89c2\u5e76\u53d1\u63a7\u5236\uff09\u5728\u9ad8\u7ade\u4e89\u8d1f\u8f7d\u4e0b\u6027\u80fd\u90fd\u4f1a\u4e0b\u964d\u3002", "method": "NEMO\u5f15\u5165\u56db\u4e2a\u6838\u5fc3\u521b\u65b0\uff1a1) \u5bf9\u4ec5\u4f7f\u7528\u81ea\u6709\u5bf9\u8c61\u7684\u4ea4\u6613\u91c7\u7528\u8d2a\u5a6a\u63d0\u4ea4\u89c4\u5219\uff1b2) \u7cbe\u7ec6\u5316\u5904\u7406\u4f9d\u8d56\u4ee5\u51cf\u5c11\u91cd\u6267\u884c\uff1b3) \u4f7f\u7528\u9759\u6001\u53ef\u63a8\u5bfc\u7684\u8bfb\u5199\u63d0\u793a\u6307\u5bfc\u6267\u884c\uff1b4) \u57fa\u4e8e\u4f18\u5148\u7ea7\u7684\u8c03\u5ea6\u5668\uff0c\u4f18\u5148\u5904\u7406\u80fd\u89e3\u9501\u5176\u4ed6\u4ea4\u6613\u7684\u4ea4\u6613\u3002", "result": "\u6a21\u62df\u6267\u884c\u5b9e\u9a8c\u8868\u660e\uff0cNEMO\u663e\u8457\u51cf\u5c11\u4e86\u5197\u4f59\u8ba1\u7b97\uff0c\u572816\u4e2a\u5de5\u4f5c\u7ebf\u7a0b\u4e0b\uff0c\u541e\u5410\u91cf\u6bd4\u6700\u5148\u8fdb\u7684OCC\u65b9\u6cd5Block-STM\u9ad842%\uff0c\u6bd4\u60b2\u89c2\u5e76\u53d1\u63a7\u5236\u57fa\u7ebf\u9ad861%\u3002", "conclusion": "NEMO\u901a\u8fc7\u7ed3\u5408OCC\u548c\u5bf9\u8c61\u6570\u636e\u6a21\u578b\uff0c\u6709\u6548\u89e3\u51b3\u4e86\u9ad8\u7ade\u4e89\u8d1f\u8f7d\u4e0b\u533a\u5757\u94fe\u6267\u884c\u5c42\u7684\u6027\u80fd\u74f6\u9888\u95ee\u9898\uff0c\u663e\u8457\u63d0\u5347\u4e86\u541e\u5410\u91cf\u3002"}}
{"id": "2510.15408", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.15408", "abs": "https://arxiv.org/abs/2510.15408", "authors": ["Mohit", "Kuljit Kaur Chahal"], "title": "Community Engagement and the Lifespan of Open-Source Software Projects", "comment": null, "summary": "Open-source software (OSS) projects depend on community engagement (CE) for\nlongevity. However, CE's quantifiable impact on project dynamics and lifespan\nis underexplored. Objectives: This study defines CE in OSS, identifies key\nmetrics, and evaluates their influence on project dynamics (releases, commits,\nbranches) and lifespan. Methods: We analyzed 33,946 GitHub repositories,\ndefining and operationalizing CE with validated per-month metrics (issues,\ncomments, watchers, stargazers). Non-parametric tests and correlations assessed\nrelationships with project dynamics and lifespan across quartiles. Results: CE\nmetrics significantly associate with project dynamics, with stronger\ncorrelations in highly engaged projects. For lifespan, a complex pattern\nemerged: per-month CE rates are highest in younger projects, declining with\nage. Yet, a subset of long-lived projects maintains exceptionally high\nactivity. Initial CE bursts appear crucial for establishment, while sustained\nhigh engagement drives extreme longevity. Active issue engagement's influence\nintensifies with age, but passive attention's declines. Conclusion: CE\ndynamically drives OSS project longevity and development. Our findings\nestablish validated CE metrics and offer deeper insights into how diverse\ncommunity activity patterns contribute to project longevity.", "AI": {"tldr": "\u8be5\u7814\u7a76\u5206\u6790\u4e8633,946\u4e2aGitHub\u4ed3\u5e93\uff0c\u5b9a\u4e49\u4e86\u5f00\u6e90\u8f6f\u4ef6\u9879\u76ee\u7684\u793e\u533a\u53c2\u4e0e\u5ea6\u6307\u6807\uff0c\u53d1\u73b0\u793e\u533a\u53c2\u4e0e\u5ea6\u4e0e\u9879\u76ee\u52a8\u6001\u663e\u8457\u76f8\u5173\uff0c\u4e14\u5bf9\u9879\u76ee\u5bff\u547d\u6709\u590d\u6742\u5f71\u54cd\u6a21\u5f0f\u3002", "motivation": "\u5f00\u6e90\u8f6f\u4ef6\u9879\u76ee\u4f9d\u8d56\u793e\u533a\u53c2\u4e0e\u6765\u7ef4\u6301\u957f\u671f\u53d1\u5c55\uff0c\u4f46\u793e\u533a\u53c2\u4e0e\u5bf9\u9879\u76ee\u52a8\u6001\u548c\u5bff\u547d\u7684\u91cf\u5316\u5f71\u54cd\u5c1a\u672a\u5145\u5206\u63a2\u7d22\u3002", "method": "\u5206\u679033,946\u4e2aGitHub\u4ed3\u5e93\uff0c\u5b9a\u4e49\u5e76\u64cd\u4f5c\u5316\u793e\u533a\u53c2\u4e0e\u5ea6\u6307\u6807\uff08\u95ee\u9898\u3001\u8bc4\u8bba\u3001\u5173\u6ce8\u8005\u3001\u661f\u6807\uff09\uff0c\u4f7f\u7528\u975e\u53c2\u6570\u68c0\u9a8c\u548c\u76f8\u5173\u6027\u5206\u6790\u8bc4\u4f30\u4e0e\u9879\u76ee\u52a8\u6001\u548c\u5bff\u547d\u7684\u5173\u7cfb\u3002", "result": "\u793e\u533a\u53c2\u4e0e\u5ea6\u6307\u6807\u4e0e\u9879\u76ee\u52a8\u6001\u663e\u8457\u76f8\u5173\uff0c\u5728\u9ad8\u5ea6\u53c2\u4e0e\u7684\u9879\u76ee\u4e2d\u76f8\u5173\u6027\u66f4\u5f3a\u3002\u9879\u76ee\u5bff\u547d\u65b9\u9762\u5448\u73b0\u590d\u6742\u6a21\u5f0f\uff1a\u6708\u5747\u53c2\u4e0e\u7387\u5728\u5e74\u8f7b\u9879\u76ee\u4e2d\u6700\u9ad8\uff0c\u968f\u5e74\u9f84\u4e0b\u964d\uff0c\u4f46\u90e8\u5206\u957f\u5bff\u9879\u76ee\u4fdd\u6301\u6781\u9ad8\u6d3b\u8dc3\u5ea6\u3002\u521d\u59cb\u53c2\u4e0e\u7206\u53d1\u5bf9\u9879\u76ee\u5efa\u7acb\u81f3\u5173\u91cd\u8981\uff0c\u6301\u7eed\u9ad8\u53c2\u4e0e\u9a71\u52a8\u6781\u7aef\u957f\u5bff\u3002", "conclusion": "\u793e\u533a\u53c2\u4e0e\u5ea6\u52a8\u6001\u9a71\u52a8\u5f00\u6e90\u8f6f\u4ef6\u9879\u76ee\u7684\u5bff\u547d\u548c\u53d1\u5c55\uff0c\u7814\u7a76\u5efa\u7acb\u4e86\u9a8c\u8bc1\u7684\u793e\u533a\u53c2\u4e0e\u5ea6\u6307\u6807\uff0c\u6df1\u5165\u63ed\u793a\u4e86\u4e0d\u540c\u793e\u533a\u6d3b\u52a8\u6a21\u5f0f\u5982\u4f55\u4fc3\u8fdb\u9879\u76ee\u957f\u5bff\u3002"}}
{"id": "2510.15147", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.15147", "abs": "https://arxiv.org/abs/2510.15147", "authors": ["Aditya Bhosale", "Kavitha Chandrasekar", "Laxmikant Kale", "Sara Kokkila-Schumacher"], "title": "An Elastic Job Scheduler for HPC Applications on the Cloud", "comment": null, "summary": "The last few years have seen an increase in adoption of the cloud for running\nHPC applications. The pay-as-you-go cost model of these cloud resources has\nnecessitated the development of specialized programming models and schedulers\nfor HPC jobs for efficient utilization of cloud resources. A key aspect of\nefficient utilization is the ability to rescale applications on the fly to\nmaximize the utilization of cloud resources. Most commonly used parallel\nprogramming models like MPI have traditionally not supported autoscaling either\nin a cloud environment or on supercomputers. While more recent work has been\ndone to implement this functionality in MPI, it is still nascent and requires\nadditional programmer effort. Charm++ is a parallel programming model that\nnatively supports dynamic rescaling through its migratable objects paradigm. In\nthis paper, we present a Kubernetes operator to run Charm++ applications on a\nKubernetes cluster. We then present a priority-based elastic job scheduler that\ncan dynamically rescale jobs based on the state of a Kubernetes cluster to\nmaximize cluster utilization while minimizing response time for high-priority\njobs. We show that our elastic scheduler, with the ability to rescale HPC jobs\nwith minimal overhead, demonstrates significant performance improvements over\ntraditional static schedulers.", "AI": {"tldr": "\u5f00\u53d1\u4e86\u4e00\u4e2aKubernetes\u64cd\u4f5c\u7b26\u6765\u8fd0\u884cCharm++\u5e94\u7528\uff0c\u5e76\u63d0\u51fa\u4e86\u57fa\u4e8e\u4f18\u5148\u7ea7\u7684\u5f39\u6027\u4f5c\u4e1a\u8c03\u5ea6\u5668\uff0c\u80fd\u591f\u52a8\u6001\u8c03\u6574HPC\u4f5c\u4e1a\u89c4\u6a21\u4ee5\u6700\u5927\u5316\u96c6\u7fa4\u5229\u7528\u7387\u5e76\u51cf\u5c11\u9ad8\u4f18\u5148\u7ea7\u4f5c\u4e1a\u7684\u54cd\u5e94\u65f6\u95f4\u3002", "motivation": "\u968f\u7740HPC\u5e94\u7528\u5728\u4e91\u73af\u5883\u4e2d\u7684\u91c7\u7528\u589e\u52a0\uff0c\u9700\u8981\u4e13\u95e8\u7684\u7f16\u7a0b\u6a21\u578b\u548c\u8c03\u5ea6\u5668\u6765\u9ad8\u6548\u5229\u7528\u4e91\u8d44\u6e90\u3002\u4f20\u7edfMPI\u7b49\u5e76\u884c\u7f16\u7a0b\u6a21\u578b\u4e0d\u652f\u6301\u81ea\u52a8\u7f29\u653e\uff0c\u800cCharm++\u901a\u8fc7\u5176\u53ef\u8fc1\u79fb\u5bf9\u8c61\u8303\u5f0f\u539f\u751f\u652f\u6301\u52a8\u6001\u91cd\u7f29\u653e\u3002", "method": "\u5f00\u53d1\u4e86Kubernetes\u64cd\u4f5c\u7b26\u6765\u8fd0\u884cCharm++\u5e94\u7528\uff0c\u5e76\u8bbe\u8ba1\u4e86\u57fa\u4e8e\u4f18\u5148\u7ea7\u7684\u5f39\u6027\u4f5c\u4e1a\u8c03\u5ea6\u5668\uff0c\u8be5\u8c03\u5ea6\u5668\u80fd\u591f\u6839\u636eKubernetes\u96c6\u7fa4\u72b6\u6001\u52a8\u6001\u8c03\u6574\u4f5c\u4e1a\u89c4\u6a21\u3002", "result": "\u5f39\u6027\u8c03\u5ea6\u5668\u80fd\u591f\u4ee5\u6700\u5c0f\u5f00\u9500\u91cd\u7f29\u653eHPC\u4f5c\u4e1a\uff0c\u4e0e\u4f20\u7edf\u9759\u6001\u8c03\u5ea6\u5668\u76f8\u6bd4\u8868\u73b0\u51fa\u663e\u8457\u7684\u6027\u80fd\u6539\u8fdb\u3002", "conclusion": "\u63d0\u51fa\u7684\u5f39\u6027\u8c03\u5ea6\u5668\u7ed3\u5408Charm++\u7684\u52a8\u6001\u91cd\u7f29\u653e\u80fd\u529b\uff0c\u5728Kubernetes\u96c6\u7fa4\u4e0a\u5b9e\u73b0\u4e86\u66f4\u597d\u7684\u8d44\u6e90\u5229\u7528\u7387\u548c\u4f5c\u4e1a\u54cd\u5e94\u65f6\u95f4\u3002"}}
{"id": "2510.15480", "categories": ["cs.SE", "cs.AI"], "pdf": "https://arxiv.org/pdf/2510.15480", "abs": "https://arxiv.org/abs/2510.15480", "authors": ["Muslim Chochlov", "Gul Aftab Ahmed", "James Vincent Patten", "Yuanhua Han", "Guoxian Lu", "David Gregg", "Jim Buckley"], "title": "Selecting and Combining Large Language Models for Scalable Code Clone Detection", "comment": null, "summary": "Source code clones pose risks ranging from intellectual property violations\nto unintended vulnerabilities. Effective and efficient scalable clone\ndetection, especially for diverged clones, remains challenging. Large language\nmodels (LLMs) have recently been applied to clone detection tasks. However, the\nrapid emergence of LLMs raises questions about optimal model selection and\npotential LLM-ensemble efficacy.\n  This paper addresses the first question by identifying 76 LLMs and filtering\nthem down to suitable candidates for large-scale clone detection. The\ncandidates were evaluated on two public industrial datasets, BigCloneBench, and\na commercial large-scale dataset. No uniformly 'best-LLM' emerged, though\nCodeT5+110M, CuBERT and SPTCode were top-performers. Analysis of LLM-candidates\nsuggested that smaller embedding sizes, smaller tokenizer vocabularies and\ntailored datasets are advantageous. On commercial large-scale dataset a\ntop-performing CodeT5+110M achieved 39.71\\% precision: twice the precision of\npreviously used CodeBERT.\n  To address the second question, this paper explores ensembling of the\nselected LLMs: effort-effective approach to improving effectiveness. Results\nsuggest the importance of score normalization and favoring ensembling methods\nlike maximum or sum over averaging. Also, findings indicate that ensembling\napproach can be statistically significant and effective on larger datasets: the\nbest-performing ensemble achieved even higher precision of 46.91\\% over\nindividual LLM on the commercial large-scale code.", "AI": {"tldr": "\u672c\u6587\u7814\u7a76\u4e86LLM\u5728\u4ee3\u7801\u514b\u9686\u68c0\u6d4b\u4e2d\u7684\u5e94\u7528\uff0c\u901a\u8fc7\u8bc4\u4f3076\u4e2aLLM\u6a21\u578b\u53d1\u73b0\u6ca1\u6709\u7edf\u4e00\u7684\"\u6700\u4f73LLM\"\uff0cCodeT5+110M\u3001CuBERT\u548cSPTCode\u8868\u73b0\u6700\u4f73\u3002\u540c\u65f6\u63a2\u7d22\u4e86LLM\u96c6\u6210\u65b9\u6cd5\uff0c\u53d1\u73b0\u6700\u5927\u6216\u6c42\u548c\u96c6\u6210\u4f18\u4e8e\u5e73\u5747\u96c6\u6210\uff0c\u5728\u5546\u4e1a\u5927\u89c4\u6a21\u6570\u636e\u96c6\u4e0a\u96c6\u6210\u65b9\u6cd5\u8fbe\u523046.91%\u7684\u7cbe\u786e\u5ea6\u3002", "motivation": "\u6e90\u4ee3\u7801\u514b\u9686\u5b58\u5728\u77e5\u8bc6\u4ea7\u6743\u4fb5\u6743\u548c\u5b89\u5168\u6f0f\u6d1e\u98ce\u9669\uff0c\u6709\u6548\u7684\u514b\u9686\u68c0\u6d4b\u7279\u522b\u662f\u5bf9\u5206\u6b67\u514b\u9686\u7684\u68c0\u6d4b\u4ecd\u7136\u5177\u6709\u6311\u6218\u6027\u3002LLM\u6700\u8fd1\u88ab\u5e94\u7528\u4e8e\u514b\u9686\u68c0\u6d4b\u4efb\u52a1\uff0c\u4f46\u5feb\u901f\u6d8c\u73b0\u7684LLM\u5f15\u53d1\u4e86\u5173\u4e8e\u6700\u4f73\u6a21\u578b\u9009\u62e9\u548cLLM\u96c6\u6210\u6f5c\u529b\u7684\u7591\u95ee\u3002", "method": "\u8bc6\u522b76\u4e2aLLM\u5e76\u7b5b\u9009\u51fa\u9002\u5408\u5927\u89c4\u6a21\u514b\u9686\u68c0\u6d4b\u7684\u5019\u9009\u6a21\u578b\uff0c\u5728\u4e24\u4e2a\u516c\u5171\u5de5\u4e1a\u6570\u636e\u96c6\u548c\u4e00\u4e2a\u5546\u4e1a\u5927\u89c4\u6a21\u6570\u636e\u96c6\u4e0a\u8fdb\u884c\u8bc4\u4f30\u3002\u540c\u65f6\u63a2\u7d22\u4e86LLM\u96c6\u6210\u65b9\u6cd5\uff0c\u5305\u62ec\u5f97\u5206\u5f52\u4e00\u5316\u548c\u4e0d\u540c\u7684\u96c6\u6210\u7b56\u7565\uff08\u6700\u5927\u3001\u6c42\u548c\u3001\u5e73\u5747\uff09\u3002", "result": "\u6ca1\u6709\u7edf\u4e00\u7684\"\u6700\u4f73LLM\"\uff0cCodeT5+110M\u3001CuBERT\u548cSPTCode\u8868\u73b0\u6700\u4f73\u3002\u5728\u5546\u4e1a\u5927\u89c4\u6a21\u6570\u636e\u96c6\u4e0a\uff0c\u8868\u73b0\u6700\u4f73\u7684CodeT5+110M\u8fbe\u523039.71%\u7684\u7cbe\u786e\u5ea6\uff0c\u662f\u4e4b\u524d\u4f7f\u7528\u7684CodeBERT\u7684\u4e24\u500d\u3002\u96c6\u6210\u65b9\u6cd5\u5728\u5546\u4e1a\u5927\u89c4\u6a21\u4ee3\u7801\u4e0a\u8fbe\u523046.91%\u7684\u7cbe\u786e\u5ea6\uff0c\u4f18\u4e8e\u5355\u4e2aLLM\u3002", "conclusion": "\u8f83\u5c0f\u7684\u5d4c\u5165\u5c3a\u5bf8\u3001\u8f83\u5c0f\u7684\u5206\u8bcd\u5668\u8bcd\u6c47\u91cf\u548c\u5b9a\u5236\u6570\u636e\u96c6\u5bf9LLM\u514b\u9686\u68c0\u6d4b\u6709\u5229\u3002\u96c6\u6210\u65b9\u6cd5\u5728\u7edf\u8ba1\u4e0a\u663e\u8457\u4e14\u5728\u5927\u6570\u636e\u96c6\u4e0a\u66f4\u6709\u6548\uff0c\u6700\u5927\u6216\u6c42\u548c\u96c6\u6210\u4f18\u4e8e\u5e73\u5747\u96c6\u6210\u3002LLM\u96c6\u6210\u662f\u63d0\u9ad8\u514b\u9686\u68c0\u6d4b\u6548\u679c\u7684\u6709\u6548\u65b9\u6cd5\u3002"}}
{"id": "2510.15215", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.15215", "abs": "https://arxiv.org/abs/2510.15215", "authors": ["Zhimin Qiu", "Feng Liu", "Yuxiao Wang", "Chenrui Hu", "Ziyu Cheng", "Di Wu"], "title": "Spatiotemporal Traffic Prediction in Distributed Backend Systems via Graph Neural Networks", "comment": null, "summary": "This paper addresses the problem of traffic prediction in distributed backend\nsystems and proposes a graph neural network based modeling approach to overcome\nthe limitations of traditional models in capturing complex dependencies and\ndynamic features. The system is abstracted as a graph with nodes and edges,\nwhere node features represent traffic and resource states, and adjacency\nrelations describe service interactions. A graph convolution mechanism enables\nmulti order propagation and aggregation of node features, while a gated\nrecurrent structure models historical sequences dynamically, thus integrating\nspatial structures with temporal evolution. A spatiotemporal joint modeling\nmodule further fuses graph representation with temporal dependency, and a\ndecoder generates future traffic predictions. The model is trained with mean\nsquared error to minimize deviations from actual values. Experiments based on\npublic distributed system logs construct combined inputs of node features,\ntopology, and sequences, and compare the proposed method with mainstream\nbaselines using MSE, RMSE, MAE, and MAPE. Results show that the proposed method\nachieves stable performance and low error across different prediction horizons\nand model depths, significantly improving the accuracy and robustness of\ntraffic forecasting in distributed backend systems and verifying the potential\nof graph neural networks in complex system modeling.", "AI": {"tldr": "\u63d0\u51fa\u57fa\u4e8e\u56fe\u795e\u7ecf\u7f51\u7edc\u7684\u5206\u5e03\u5f0f\u540e\u7aef\u7cfb\u7edf\u6d41\u91cf\u9884\u6d4b\u65b9\u6cd5\uff0c\u901a\u8fc7\u56fe\u5377\u79ef\u548c\u95e8\u63a7\u5faa\u73af\u7ed3\u6784\u6574\u5408\u65f6\u7a7a\u7279\u5f81\uff0c\u663e\u8457\u63d0\u5347\u9884\u6d4b\u51c6\u786e\u6027\u548c\u9c81\u68d2\u6027\u3002", "motivation": "\u4f20\u7edf\u6a21\u578b\u96be\u4ee5\u6355\u6349\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u590d\u6742\u7684\u4f9d\u8d56\u5173\u7cfb\u548c\u52a8\u6001\u7279\u5f81\uff0c\u9700\u8981\u66f4\u6709\u6548\u7684\u5efa\u6a21\u65b9\u6cd5\u6765\u63d0\u9ad8\u6d41\u91cf\u9884\u6d4b\u7cbe\u5ea6\u3002", "method": "\u5c06\u7cfb\u7edf\u62bd\u8c61\u4e3a\u56fe\u7ed3\u6784\uff0c\u4f7f\u7528\u56fe\u5377\u79ef\u8fdb\u884c\u591a\u9636\u7279\u5f81\u4f20\u64ad\uff0c\u7ed3\u5408\u95e8\u63a7\u5faa\u73af\u7ed3\u6784\u5efa\u6a21\u5386\u53f2\u5e8f\u5217\uff0c\u901a\u8fc7\u65f6\u7a7a\u8054\u5408\u5efa\u6a21\u6a21\u5757\u878d\u5408\u56fe\u8868\u793a\u4e0e\u65f6\u95f4\u4f9d\u8d56\uff0c\u6700\u540e\u7528\u89e3\u7801\u5668\u751f\u6210\u672a\u6765\u6d41\u91cf\u9884\u6d4b\u3002", "result": "\u5728\u516c\u5f00\u5206\u5e03\u5f0f\u7cfb\u7edf\u65e5\u5fd7\u4e0a\u7684\u5b9e\u9a8c\u8868\u660e\uff0c\u8be5\u65b9\u6cd5\u5728\u4e0d\u540c\u9884\u6d4b\u65f6\u57df\u548c\u6a21\u578b\u6df1\u5ea6\u4e0b\u5747\u8868\u73b0\u7a33\u5b9a\u4e14\u8bef\u5dee\u8f83\u4f4e\uff0c\u5404\u9879\u6307\u6807\uff08MSE\u3001RMSE\u3001MAE\u3001MAPE\uff09\u5747\u4f18\u4e8e\u4e3b\u6d41\u57fa\u7ebf\u65b9\u6cd5\u3002", "conclusion": "\u56fe\u795e\u7ecf\u7f51\u7edc\u5728\u590d\u6742\u7cfb\u7edf\u5efa\u6a21\u4e2d\u5177\u6709\u5de8\u5927\u6f5c\u529b\uff0c\u6240\u63d0\u65b9\u6cd5\u80fd\u663e\u8457\u63d0\u5347\u5206\u5e03\u5f0f\u540e\u7aef\u7cfb\u7edf\u6d41\u91cf\u9884\u6d4b\u7684\u51c6\u786e\u6027\u548c\u9c81\u68d2\u6027\u3002"}}
{"id": "2510.15494", "categories": ["cs.SE", "cs.AI", "cs.PF"], "pdf": "https://arxiv.org/pdf/2510.15494", "abs": "https://arxiv.org/abs/2510.15494", "authors": ["Lirong Yi", "Gregory Gay", "Philipp Leitner"], "title": "An Experimental Study of Real-Life LLM-Proposed Performance Improvements", "comment": null, "summary": "Large Language Models (LLMs) can generate code, but can they generate fast\ncode? In this paper, we study this question using a dataset of 65 real-world\ntasks mined from open-source Java programs. We specifically select tasks where\ndevelopers achieved significant speedups, and employ an automated pipeline to\ngenerate patches for these issues using two leading LLMs under four prompt\nvariations. By rigorously benchmarking the results against the baseline and\nhuman-authored solutions, we demonstrate that LLM-generated code indeed\nimproves performance over the baseline in most cases. However, patches proposed\nby human developers outperform LLM fixes by a statistically significant margin,\nindicating that LLMs often fall short of finding truly optimal solutions. We\nfurther find that LLM solutions are semantically identical or similar to the\ndeveloper optimization idea in approximately two-thirds of cases, whereas they\npropose a more original idea in the remaining one-third. However, these\noriginal ideas only occasionally yield substantial performance gains.", "AI": {"tldr": "LLM\u751f\u6210\u7684\u4ee3\u7801\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u80fd\u63d0\u5347\u6027\u80fd\uff0c\u4f46\u4ecd\u4e0d\u5982\u4eba\u7c7b\u5f00\u53d1\u8005\u4f18\u5316\u7684\u4ee3\u7801\uff0c\u4e14LLM\u7684\u539f\u521b\u4f18\u5316\u65b9\u6848\u5f88\u5c11\u80fd\u5e26\u6765\u663e\u8457\u6027\u80fd\u63d0\u5347\u3002", "motivation": "\u7814\u7a76\u5927\u578b\u8bed\u8a00\u6a21\u578b\u662f\u5426\u80fd\u751f\u6210\u9ad8\u6027\u80fd\u4ee3\u7801\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u529f\u80fd\u6027\u4ee3\u7801\u3002", "method": "\u4f7f\u7528\u4ece\u5f00\u6e90Java\u7a0b\u5e8f\u4e2d\u6316\u6398\u768465\u4e2a\u771f\u5b9e\u4efb\u52a1\uff0c\u91c7\u7528\u81ea\u52a8\u5316\u6d41\u7a0b\u7528\u4e24\u79cd\u9886\u5148\u7684LLM\u751f\u6210\u8865\u4e01\uff0c\u5e76\u4e0e\u57fa\u51c6\u548c\u4eba\u5de5\u89e3\u51b3\u65b9\u6848\u8fdb\u884c\u4e25\u683c\u57fa\u51c6\u6d4b\u8bd5\u3002", "result": "LLM\u751f\u6210\u7684\u4ee3\u7801\u5728\u5927\u591a\u6570\u60c5\u51b5\u4e0b\u786e\u5b9e\u63d0\u9ad8\u4e86\u6027\u80fd\uff0c\u4f46\u4eba\u7c7b\u5f00\u53d1\u8005\u63d0\u51fa\u7684\u8865\u4e01\u5728\u7edf\u8ba1\u4e0a\u663e\u8457\u4f18\u4e8eLLM\u4fee\u590d\u65b9\u6848\u3002\u7ea6\u4e09\u5206\u4e4b\u4e8c\u7684LLM\u89e3\u51b3\u65b9\u6848\u4e0e\u5f00\u53d1\u8005\u4f18\u5316\u601d\u8def\u8bed\u4e49\u76f8\u540c\u6216\u76f8\u4f3c\uff0c\u5176\u4f59\u4e09\u5206\u4e4b\u4e00\u63d0\u51fa\u66f4\u539f\u521b\u7684\u60f3\u6cd5\u4f46\u5f88\u5c11\u5e26\u6765\u663e\u8457\u6027\u80fd\u63d0\u5347\u3002", "conclusion": "LLM\u5728\u4ee3\u7801\u4f18\u5316\u65b9\u9762\u6709\u6f5c\u529b\uff0c\u4f46\u5c1a\u672a\u8fbe\u5230\u4eba\u7c7b\u5f00\u53d1\u8005\u7684\u4f18\u5316\u6c34\u5e73\uff0c\u7279\u522b\u662f\u5728\u5bfb\u627e\u771f\u6b63\u6700\u4f18\u89e3\u51b3\u65b9\u6848\u65b9\u9762\u5b58\u5728\u4e0d\u8db3\u3002"}}
{"id": "2510.15330", "categories": ["cs.DC", "cs.AI", "cs.CL", "cs.NI"], "pdf": "https://arxiv.org/pdf/2510.15330", "abs": "https://arxiv.org/abs/2510.15330", "authors": ["Tella Rajashekhar Reddy", "Atharva Deshmukh", "Karan Tandon", "Rohan Gandhi", "Anjaly Parayil", "Debopam Bhattacherjee"], "title": "BeLLMan: Controlling LLM Congestion", "comment": "To be presented at FAISYS 2025", "summary": "Large language model (LLM) applications are blindfolded to the infrastructure\nunderneath and generate tokens autoregressively, indifferent to the system\nload, thus risking inferencing latency inflation and poor user experience. Our\nfirst-cut controller, named beLLMan, enables the LLM infrastructure to actively\nand progressively signal the first-party LLM application to adjust the output\nlength in response to changing system load. On a real testbed with H100 GPUs,\nbeLLMan helps keep inferencing latency under control (upto 8X lower end-to-end\nlatency) and reduces energy consumption by 25% (while serving 19% more\nrequests) during periods of congestion for a summarization workload.", "AI": {"tldr": "beLLMan\u63a7\u5236\u5668\u901a\u8fc7\u4e3b\u52a8\u8c03\u6574LLM\u5e94\u7528\u8f93\u51fa\u957f\u5ea6\u6765\u5e94\u5bf9\u7cfb\u7edf\u8d1f\u8f7d\u53d8\u5316\uff0c\u663e\u8457\u964d\u4f4e\u63a8\u7406\u5ef6\u8fdf\u548c\u80fd\u8017", "motivation": "\u73b0\u6709LLM\u5e94\u7528\u5bf9\u5e95\u5c42\u57fa\u7840\u8bbe\u65bd\u4e0d\u611f\u77e5\uff0c\u5728\u7cfb\u7edf\u8d1f\u8f7d\u53d8\u5316\u65f6\u65e0\u6cd5\u81ea\u9002\u5e94\u8c03\u6574\uff0c\u5bfc\u81f4\u63a8\u7406\u5ef6\u8fdf\u589e\u52a0\u548c\u7528\u6237\u4f53\u9a8c\u4e0b\u964d", "method": "\u5f00\u53d1beLLMan\u63a7\u5236\u5668\uff0c\u4f7fLLM\u57fa\u7840\u8bbe\u65bd\u80fd\u591f\u4e3b\u52a8\u5411\u7b2c\u4e00\u65b9LLM\u5e94\u7528\u53d1\u9001\u4fe1\u53f7\uff0c\u6839\u636e\u7cfb\u7edf\u8d1f\u8f7d\u52a8\u6001\u8c03\u6574\u8f93\u51fa\u957f\u5ea6", "result": "\u5728H100 GPU\u6d4b\u8bd5\u5e73\u53f0\u4e0a\uff0cbeLLMan\u5c06\u7aef\u5230\u7aef\u5ef6\u8fdf\u964d\u4f4e\u9ad8\u8fbe8\u500d\uff0c\u80fd\u8017\u51cf\u5c1125%\uff0c\u540c\u65f6\u5728\u9ad8\u8d1f\u8f7d\u671f\u95f4\u591a\u670d\u52a119%\u7684\u8bf7\u6c42", "conclusion": "beLLMan\u901a\u8fc7\u7cfb\u7edf\u8d1f\u8f7d\u611f\u77e5\u7684\u8f93\u51fa\u957f\u5ea6\u8c03\u6574\uff0c\u6709\u6548\u63a7\u5236\u4e86LLM\u63a8\u7406\u5ef6\u8fdf\u5e76\u63d0\u5347\u4e86\u80fd\u6548"}}
{"id": "2510.15512", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.15512", "abs": "https://arxiv.org/abs/2510.15512", "authors": ["Wachiraphan Charoenwet", "Patanamon Thongtanunam", "Van-Thuan Pham", "Christoph Treude"], "title": "Enhancing Code Review through Fuzzing and Likely Invariants", "comment": null, "summary": "Many software projects employ manual code review to gatekeep defects and\nvulnerabilities in the code before integration. However, reviewers often work\nunder time pressure and rely primarily on static inspection, leaving the\ndynamic aspects of the program unexplored. Dynamic analyses could reveal such\nbehaviors, but they are rarely integrated into reviews. Among them, fuzzing is\ntypically applied later to uncover crashing bugs. Yet its ability to exercise\ncode with diverse inputs makes it promising for exposing non-crashing, but\nunexpected, behaviors earlier. Still, without suitable mechanisms to analyze\nprogram behaviors, the rich data produced during fuzzing remains inaccessible\nto reviewers, limiting its practical value in this context.\n  We hypothesize that unexpected variations in program behaviors could signify\npotential bugs. The impact of code changes can be automatically captured at\nruntime. Representing program behavior as likely invariants, dynamic properties\nconsistently observed at specific program points, can provide practical signals\nof behavioral changes. Such signals offer a way to distinguish between intended\nchanges and unexpected behavioral shifts from code changes.\n  We present FuzzSight, a framework that leverages likely invariants from\nnon-crashing fuzzing inputs to highlight behavioral differences across program\nversions. By surfacing such differences, it provides insights into which code\nblocks may need closer attention. In our evaluation, FuzzSight flagged 75% of\nregression bugs and up to 80% of vulnerabilities uncovered by 24-hour fuzzing.\nIt also outperformed SAST in identifying buggy code blocks, achieving ten times\nhigher detection rates with fewer false alarms. In summary, FuzzSight\ndemonstrates the potential and value of leveraging fuzzing and invariant\nanalysis for early-stage code review, bridging static inspection with dynamic\nbehavioral insights.", "AI": {"tldr": "FuzzSight\u662f\u4e00\u4e2a\u5229\u7528\u6a21\u7cca\u6d4b\u8bd5\u548c\u4e0d\u53d8\u5f0f\u5206\u6790\u6765\u68c0\u6d4b\u4ee3\u7801\u53d8\u66f4\u4e2d\u884c\u4e3a\u5dee\u5f02\u7684\u6846\u67b6\uff0c\u80fd\u591f\u5728\u4ee3\u7801\u5ba1\u67e5\u65e9\u671f\u53d1\u73b0\u6f5c\u5728\u7f3a\u9677\u3002", "motivation": "\u4f20\u7edf\u4ee3\u7801\u5ba1\u67e5\u4e3b\u8981\u4f9d\u8d56\u9759\u6001\u68c0\u67e5\uff0c\u96be\u4ee5\u53d1\u73b0\u7a0b\u5e8f\u52a8\u6001\u884c\u4e3a\u95ee\u9898\u3002\u6a21\u7cca\u6d4b\u8bd5\u867d\u7136\u80fd\u4ea7\u751f\u4e30\u5bcc\u7684\u8fd0\u884c\u65f6\u6570\u636e\uff0c\u4f46\u7f3a\u4e4f\u5408\u9002\u7684\u5206\u6790\u673a\u5236\u6765\u5e2e\u52a9\u5ba1\u67e5\u8005\u8bc6\u522b\u975e\u5d29\u6e83\u6027\u884c\u4e3a\u53d8\u5316\u3002", "method": "\u901a\u8fc7\u6a21\u7cca\u6d4b\u8bd5\u751f\u6210\u975e\u5d29\u6e83\u8f93\u5165\uff0c\u6355\u83b7\u7a0b\u5e8f\u8fd0\u884c\u65f6\u884c\u4e3a\uff0c\u5c06\u5176\u8868\u793a\u4e3a\u53ef\u80fd\u4e0d\u53d8\u5f0f\uff08likely invariants\uff09\uff0c\u7136\u540e\u6bd4\u8f83\u4e0d\u540c\u7248\u672c\u95f4\u7684\u4e0d\u53d8\u5f0f\u5dee\u5f02\u6765\u8bc6\u522b\u884c\u4e3a\u53d8\u5316\u3002", "result": "\u5728\u8bc4\u4f30\u4e2d\uff0cFuzzSight\u6807\u8bb0\u4e8675%\u7684\u56de\u5f52\u7f3a\u9677\u548c\u9ad8\u8fbe80%\u7684\u6f0f\u6d1e\uff0c\u76f8\u6bd4\u9759\u6001\u5e94\u7528\u5b89\u5168\u6d4b\u8bd5\uff08SAST\uff09\u68c0\u6d4b\u7387\u63d0\u9ad8\u4e8610\u500d\u4e14\u8bef\u62a5\u66f4\u5c11\u3002", "conclusion": "FuzzSight\u5c55\u793a\u4e86\u5c06\u6a21\u7cca\u6d4b\u8bd5\u548c\u4e0d\u53d8\u5f0f\u5206\u6790\u7ed3\u5408\u7528\u4e8e\u65e9\u671f\u4ee3\u7801\u5ba1\u67e5\u7684\u6f5c\u529b\uff0c\u80fd\u591f\u6709\u6548\u8fde\u63a5\u9759\u6001\u68c0\u67e5\u4e0e\u52a8\u6001\u884c\u4e3a\u6d1e\u5bdf\u3002"}}
{"id": "2510.15355", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.15355", "abs": "https://arxiv.org/abs/2510.15355", "authors": ["Tim Kraus", "Axel Sauer", "Ingo Feldner"], "title": "Cloud-Enabled Virtual Prototypes", "comment": "8 pages, 5 figures, Published in DVCon Europe 2025", "summary": "The rapid evolution of embedded systems, along with the growing variety and\ncomplexity of AI algorithms, necessitates a powerful hardware/software\nco-design methodology based on virtual prototyping technologies. The market\noffers a diverse range of simulation solutions, each with its unique\ntechnological approach and therefore strengths and weaknesses. Additionally,\nwith the increasing availability of remote on-demand computing resources and\ntheir adaptation throughout the industry, the choice of the host infrastructure\nfor execution opens even more new possibilities for operational strategies.\nThis work explores the dichotomy between local and cloud-based simulation\nenvironments, focusing on the trade-offs between scalability and privacy. We\ndiscuss how the setup of the compute infrastructure impacts the performance of\nthe execution and security of data involved in the process. Furthermore, we\nhighlight the development workflow associated with embedded AI and the critical\nrole of efficient simulations in optimizing these algorithms. With the proposed\nsolution, we aim to sustainably improve trust in remote simulations and\nfacilitate the adoption of virtual prototyping practices.", "AI": {"tldr": "\u672c\u6587\u63a2\u8ba8\u4e86\u672c\u5730\u4e0e\u4e91\u7aef\u4eff\u771f\u73af\u5883\u4e4b\u95f4\u7684\u6743\u8861\uff0c\u91cd\u70b9\u5173\u6ce8\u53ef\u6269\u5c55\u6027\u4e0e\u9690\u79c1\u4fdd\u62a4\u7684\u5e73\u8861\uff0c\u65e8\u5728\u63d0\u9ad8\u8fdc\u7a0b\u4eff\u771f\u7684\u53ef\u4fe1\u5ea6\u5e76\u4fc3\u8fdb\u865a\u62df\u539f\u578b\u6280\u672f\u7684\u91c7\u7528\u3002", "motivation": "\u5d4c\u5165\u5f0f\u7cfb\u7edf\u7684\u5feb\u901f\u53d1\u5c55\u548cAI\u7b97\u6cd5\u7684\u590d\u6742\u6027\u589e\u52a0\uff0c\u9700\u8981\u57fa\u4e8e\u865a\u62df\u539f\u578b\u6280\u672f\u7684\u5f3a\u5927\u786c\u4ef6/\u8f6f\u4ef6\u534f\u540c\u8bbe\u8ba1\u65b9\u6cd5\uff0c\u540c\u65f6\u4e91\u8ba1\u7b97\u8d44\u6e90\u7684\u666e\u53ca\u4e3a\u4eff\u771f\u6267\u884c\u63d0\u4f9b\u4e86\u65b0\u7684\u57fa\u7840\u8bbe\u65bd\u9009\u62e9\u3002", "method": "\u5206\u6790\u672c\u5730\u4e0e\u4e91\u7aef\u4eff\u771f\u73af\u5883\u7684\u5bf9\u6bd4\uff0c\u8ba8\u8bba\u8ba1\u7b97\u57fa\u7840\u8bbe\u65bd\u8bbe\u7f6e\u5bf9\u6267\u884c\u6027\u80fd\u548c\u6570\u636e\u5b89\u5168\u7684\u5f71\u54cd\uff0c\u5f3a\u8c03\u5d4c\u5165\u5f0fAI\u5f00\u53d1\u5de5\u4f5c\u6d41\u7a0b\u4e2d\u9ad8\u6548\u4eff\u771f\u7684\u5173\u952e\u4f5c\u7528\u3002", "result": "\u63d0\u51fa\u4e86\u4e00\u4e2a\u89e3\u51b3\u65b9\u6848\uff0c\u65e8\u5728\u53ef\u6301\u7eed\u5730\u63d0\u9ad8\u8fdc\u7a0b\u4eff\u771f\u7684\u53ef\u4fe1\u5ea6\uff0c\u5e76\u4fc3\u8fdb\u865a\u62df\u539f\u578b\u5b9e\u8df5\u7684\u5e94\u7528\u3002", "conclusion": "\u901a\u8fc7\u5e73\u8861\u53ef\u6269\u5c55\u6027\u4e0e\u9690\u79c1\u4fdd\u62a4\uff0c\u4e91\u7aef\u4eff\u771f\u73af\u5883\u53ef\u4ee5\u4e3a\u5d4c\u5165\u5f0fAI\u5f00\u53d1\u63d0\u4f9b\u6709\u6548\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u9700\u8981\u89e3\u51b3\u6570\u636e\u5b89\u5168\u548c\u6027\u80fd\u4f18\u5316\u7b49\u5173\u952e\u95ee\u9898\u3002"}}
{"id": "2510.15565", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.15565", "abs": "https://arxiv.org/abs/2510.15565", "authors": ["Vinicius Moraes de Jesus", "Andre Georghton Cardoso Pacheco"], "title": "Colepp: uma ferramenta multiplataforma para coleta de dados de dispositivos vestiveis", "comment": "in Portuguese language", "summary": "The widespread adoption of wearable devices such as smartwatches and fitness\ntrackers has fueled the demand for reliable physiological and movement data\ncollection tools. However, challenges such as limited access to large,\nhigh-quality public datasets and a lack of control over data collection\nconditions hinder the development of robust algorithms. This work presents\nColepp, an open-source, cross-platform tool designed to collect and synchronize\ndata from multiple wearable devices, including heart rate (via ECG and PPG) and\nmotion signals (accelerometer and gyroscope). The system integrates a\nsmartphone as a central hub, receiving data from a Polar H10 chest strap and a\nWear OS smartwatch, and exporting synchronized datasets in CSV format. Through\na custom synchronization protocol and user-friendly interface, Colepp\nfacilitates the generation of customizable, real-world datasets suitable for\napplications such as human activity recognition and heart rate estimation. A\nuse case shows the effectiveness of the tool in producing consistent and\nsynchronized signals.", "AI": {"tldr": "Colepp\u662f\u4e00\u4e2a\u5f00\u6e90\u8de8\u5e73\u53f0\u5de5\u5177\uff0c\u7528\u4e8e\u4ece\u591a\u4e2a\u53ef\u7a7f\u6234\u8bbe\u5907\u6536\u96c6\u548c\u540c\u6b65\u751f\u7406\u4e0e\u8fd0\u52a8\u6570\u636e\uff0c\u5305\u62ec\u5fc3\u7387\u548c\u8fd0\u52a8\u4fe1\u53f7\u3002", "motivation": "\u53ef\u7a7f\u6234\u8bbe\u5907\u5e7f\u6cdb\u4f7f\u7528\uff0c\u4f46\u7f3a\u4e4f\u9ad8\u8d28\u91cf\u516c\u5171\u6570\u636e\u96c6\u548c\u53ef\u63a7\u6570\u636e\u6536\u96c6\u6761\u4ef6\uff0c\u963b\u788d\u4e86\u7a33\u5065\u7b97\u6cd5\u7684\u53d1\u5c55\u3002", "method": "\u4f7f\u7528\u667a\u80fd\u624b\u673a\u4f5c\u4e3a\u4e2d\u5fc3\u67a2\u7ebd\uff0c\u96c6\u6210Polar H10\u80f8\u5e26\u548cWear OS\u667a\u80fd\u624b\u8868\uff0c\u901a\u8fc7\u81ea\u5b9a\u4e49\u540c\u6b65\u534f\u8bae\u6536\u96c6ECG\u3001PPG\u3001\u52a0\u901f\u5ea6\u8ba1\u548c\u9640\u87ba\u4eea\u6570\u636e\uff0c\u5bfc\u51faCSV\u683c\u5f0f\u7684\u540c\u6b65\u6570\u636e\u96c6\u3002", "result": "\u5de5\u5177\u80fd\u591f\u4ea7\u751f\u4e00\u81f4\u4e14\u540c\u6b65\u7684\u4fe1\u53f7\uff0c\u9002\u7528\u4e8e\u4eba\u7c7b\u6d3b\u52a8\u8bc6\u522b\u548c\u5fc3\u7387\u4f30\u8ba1\u7b49\u5e94\u7528\u3002", "conclusion": "Colepp\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7528\u6237\u53cb\u597d\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u4fbf\u4e8e\u751f\u6210\u53ef\u5b9a\u5236\u7684\u771f\u5b9e\u4e16\u754c\u6570\u636e\u96c6\uff0c\u652f\u6301\u53ef\u7a7f\u6234\u8bbe\u5907\u76f8\u5173\u7b97\u6cd5\u7684\u5f00\u53d1\u3002"}}
{"id": "2510.15473", "categories": ["cs.DC", "math.PR"], "pdf": "https://arxiv.org/pdf/2510.15473", "abs": "https://arxiv.org/abs/2510.15473", "authors": ["Petra Berenbrink", "Robert Els\u00e4sser", "Tom Friedetzky", "Hamed Hosseinpour", "Dominik Kaaser", "Peter Kling", "Thomas Sauerwald"], "title": "(Almost) Perfect Discrete Iterative Load Balancing", "comment": null, "summary": "We consider discrete, iterative load balancing via matchings on arbitrary\ngraphs. Initially each node holds a certain number of tokens, defining the load\nof the node, and the objective is to redistribute the tokens such that\neventually each node has approximately the same number of tokens. We present\nresults for a general class of simple local balancing schemes where the tokens\nare balanced via matchings. In each round the process averages the tokens of\nany two matched nodes. If the sum of their tokens is odd, the node to receive\nthe one excess token is selected at random. Our class covers three popular\nmodels: in the matching model a new matching is generated randomly in each\nround, in the balancing circuit model a fixed sequence of matchings is applied\nperiodically, and in the asynchronous model the load is balanced over a\nrandomly chosen edge.\n  We measure the quality of a load vector by its discrepancy, defined as the\ndifference between the maximum and minimum load across all nodes. As our main\nresult we show that with high probability our discrete balancing scheme reaches\na discrepancy of $3$ in a number of rounds which asymptotically matches the\nspectral bound for continuous load balancing with fractional load.\n  This result improves and tightens a long line of previous works, by not only\nachieving a small constant discrepancy (instead of a non-explicit, large\nconstant) but also holding for arbitrary instead of regular graphs. The result\nalso demonstrates that in the general model we consider, discrete load\nbalancing is no harder than continuous load balancing.", "AI": {"tldr": "\u8be5\u8bba\u6587\u7814\u7a76\u79bb\u6563\u8d1f\u8f7d\u5e73\u8861\u95ee\u9898\uff0c\u901a\u8fc7\u5339\u914d\u7b97\u6cd5\u5728\u4efb\u610f\u56fe\u4e0a\u5b9e\u73b0\u8d1f\u8f7d\u5747\u8861\uff0c\u6700\u7ec8\u8fbe\u5230\u6700\u5927\u8d1f\u8f7d\u5dee\u4ec5\u4e3a3\u7684\u4f18\u5f02\u7ed3\u679c\u3002", "motivation": "\u7814\u7a76\u79bb\u6563\u8d1f\u8f7d\u5e73\u8861\u95ee\u9898\uff0c\u63a2\u7d22\u5728\u4efb\u610f\u56fe\u4e0a\u901a\u8fc7\u5339\u914d\u7b97\u6cd5\u5b9e\u73b0\u9ad8\u6548\u8d1f\u8f7d\u5747\u8861\u7684\u65b9\u6cd5\uff0c\u65e8\u5728\u6539\u8fdb\u73b0\u6709\u7ed3\u679c\u5e76\u8bc1\u660e\u79bb\u6563\u8d1f\u8f7d\u5e73\u8861\u4e0e\u8fde\u7eed\u8d1f\u8f7d\u5e73\u8861\u5177\u6709\u76f8\u540c\u7684\u590d\u6742\u5ea6\u3002", "method": "\u4f7f\u7528\u57fa\u4e8e\u5339\u914d\u7684\u5c40\u90e8\u5e73\u8861\u65b9\u6848\uff0c\u6bcf\u8f6e\u901a\u8fc7\u5339\u914d\u8282\u70b9\u6765\u5e73\u5747\u5316\u8d1f\u8f7d\u3002\u5982\u679c\u4e24\u4e2a\u8282\u70b9\u7684\u8d1f\u8f7d\u548c\u4e3a\u5947\u6570\uff0c\u5219\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u8282\u70b9\u63a5\u6536\u591a\u4f59\u4ee4\u724c\u3002\u7814\u7a76\u8986\u76d6\u4e09\u79cd\u6a21\u578b\uff1a\u5339\u914d\u6a21\u578b\u3001\u5e73\u8861\u7535\u8def\u6a21\u578b\u548c\u5f02\u6b65\u6a21\u578b\u3002", "result": "\u8bc1\u660e\u8be5\u79bb\u6563\u5e73\u8861\u65b9\u6848\u4ee5\u9ad8\u6982\u7387\u5728\u6e10\u8fdb\u5339\u914d\u8fde\u7eed\u8d1f\u8f7d\u5e73\u8861\u8c31\u754c\u8f6e\u6570\u5185\u8fbe\u5230\u6700\u5927\u8d1f\u8f7d\u5dee\u4e3a3\u7684\u4f18\u5f02\u7ed3\u679c\uff0c\u9002\u7528\u4e8e\u4efb\u610f\u56fe\u800c\u975e\u4ec5\u9650\u4e8e\u6b63\u5219\u56fe\u3002", "conclusion": "\u79bb\u6563\u8d1f\u8f7d\u5e73\u8861\u4e0e\u8fde\u7eed\u8d1f\u8f7d\u5e73\u8861\u5177\u6709\u76f8\u540c\u7684\u590d\u6742\u5ea6\uff0c\u4e14\u80fd\u591f\u5728\u4efb\u610f\u56fe\u4e0a\u5b9e\u73b0\u5e38\u6570\u7ea7\u522b\u7684\u8d1f\u8f7d\u5dee\u5f02\uff0c\u6539\u8fdb\u4e86\u5148\u524d\u5de5\u4f5c\u7684\u7ed3\u679c\u3002"}}
{"id": "2510.15585", "categories": ["cs.SE", "cs.CL", "cs.PL", "F.2.2; I.2.7"], "pdf": "https://arxiv.org/pdf/2510.15585", "abs": "https://arxiv.org/abs/2510.15585", "authors": ["Dr Simon Thorne", "Dr Advait Sarkar"], "title": "Leveraging Test Driven Development with Large Language Models for Reliable and Verifiable Spreadsheet Code Generation: A Research Framework", "comment": "16 pages", "summary": "Large Language Models (LLMs), such as ChatGPT, are increasingly leveraged for\ngenerating both traditional software code and spreadsheet logic. Despite their\nimpressive generative capabilities, these models frequently exhibit critical\nissues such as hallucinations, subtle logical inconsistencies, and syntactic\nerrors, risks particularly acute in high stakes domains like financial\nmodelling and scientific computations, where accuracy and reliability are\nparamount. This position paper proposes a structured research framework that\nintegrates the proven software engineering practice of Test-Driven Development\n(TDD) with Large Language Model (LLM) driven generation to enhance the\ncorrectness of, reliability of, and user confidence in generated outputs. We\nhypothesise that a \"test first\" methodology provides both technical constraints\nand cognitive scaffolding, guiding LLM outputs towards more accurate,\nverifiable, and comprehensible solutions. Our framework, applicable across\ndiverse programming contexts, from spreadsheet formula generation to scripting\nlanguages such as Python and strongly typed languages like Rust, includes an\nexplicitly outlined experimental design with clearly defined participant\ngroups, evaluation metrics, and illustrative TDD based prompting examples. By\nemphasising test driven thinking, we aim to improve computational thinking,\nprompt engineering skills, and user engagement, particularly benefiting\nspreadsheet users who often lack formal programming training yet face serious\nconsequences from logical errors. We invite collaboration to refine and\nempirically evaluate this approach, ultimately aiming to establish responsible\nand reliable LLM integration in both educational and professional development\npractices.", "AI": {"tldr": "\u8be5\u7acb\u573a\u8bba\u6587\u63d0\u51fa\u5c06\u6d4b\u8bd5\u9a71\u52a8\u5f00\u53d1(TDD)\u4e0e\u5927\u578b\u8bed\u8a00\u6a21\u578b(LLM)\u751f\u6210\u76f8\u7ed3\u5408\u7684\u7814\u7a76\u6846\u67b6\uff0c\u65e8\u5728\u63d0\u9ad8\u751f\u6210\u4ee3\u7801\u7684\u6b63\u786e\u6027\u548c\u53ef\u9760\u6027\uff0c\u7279\u522b\u662f\u5728\u91d1\u878d\u5efa\u6a21\u548c\u79d1\u5b66\u8ba1\u7b97\u7b49\u9ad8\u98ce\u9669\u9886\u57df\u3002", "motivation": "LLM\u5728\u751f\u6210\u4ee3\u7801\u65f6\u7ecf\u5e38\u51fa\u73b0\u5e7b\u89c9\u3001\u903b\u8f91\u4e0d\u4e00\u81f4\u548c\u8bed\u6cd5\u9519\u8bef\u7b49\u95ee\u9898\uff0c\u8fd9\u4e9b\u98ce\u9669\u5728\u51c6\u786e\u6027\u81f3\u5173\u91cd\u8981\u7684\u9886\u57df\u5c24\u4e3a\u4e25\u91cd\u3002\u9700\u8981\u4e00\u79cd\u65b9\u6cd5\u6765\u589e\u5f3a\u751f\u6210\u8f93\u51fa\u7684\u53ef\u9760\u6027\u548c\u7528\u6237\u4fe1\u5fc3\u3002", "method": "\u63d0\u51fa\"\u6d4b\u8bd5\u4f18\u5148\"\u7684\u65b9\u6cd5\u8bba\uff0c\u5c06TDD\u5b9e\u8df5\u4e0eLLM\u9a71\u52a8\u751f\u6210\u76f8\u7ed3\u5408\uff0c\u901a\u8fc7\u6280\u672f\u7ea6\u675f\u548c\u8ba4\u77e5\u652f\u67b6\u6765\u5f15\u5bfcLLM\u8f93\u51fa\u66f4\u51c6\u786e\u3001\u53ef\u9a8c\u8bc1\u548c\u53ef\u7406\u89e3\u7684\u89e3\u51b3\u65b9\u6848\u3002", "result": "\u8be5\u6846\u67b6\u9002\u7528\u4e8e\u591a\u79cd\u7f16\u7a0b\u73af\u5883\uff0c\u5305\u62ec\u7535\u5b50\u8868\u683c\u516c\u5f0f\u751f\u6210\u3001Python\u811a\u672c\u548cRust\u7b49\u5f3a\u7c7b\u578b\u8bed\u8a00\uff0c\u5e76\u8bbe\u8ba1\u4e86\u660e\u786e\u7684\u5b9e\u9a8c\u65b9\u6848\u3001\u8bc4\u4f30\u6307\u6807\u548cTDD\u63d0\u793a\u793a\u4f8b\u3002", "conclusion": "\u901a\u8fc7\u5f3a\u8c03\u6d4b\u8bd5\u9a71\u52a8\u601d\u7ef4\uff0c\u65e8\u5728\u63d0\u9ad8\u8ba1\u7b97\u601d\u7ef4\u3001\u63d0\u793a\u5de5\u7a0b\u6280\u80fd\u548c\u7528\u6237\u53c2\u4e0e\u5ea6\uff0c\u7279\u522b\u6709\u5229\u4e8e\u7f3a\u4e4f\u6b63\u5f0f\u7f16\u7a0b\u57f9\u8bad\u7684\u7535\u5b50\u8868\u683c\u7528\u6237\u3002\u6700\u7ec8\u76ee\u6807\u662f\u5efa\u7acb\u8d1f\u8d23\u4efb\u548c\u53ef\u9760\u7684LLM\u96c6\u6210\u5b9e\u8df5\u3002"}}
{"id": "2510.15642", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.15642", "abs": "https://arxiv.org/abs/2510.15642", "authors": ["Sian Brooke"], "title": "Interact and React: Exploring Gender Patterns in Development and the Impact on Innovation and Robustness of a User Interface Tool", "comment": "Published in AoIR 2025", "summary": "In open-source software design, the inclusion of women is often highlighted\nsimply to remind programmers that women exist. Yet, little attention is given\nto how greater gender diversity, specifically women's participation, could\nfundamentally alter development patterns. To understand the potential impact of\ngender inclusion, this study investigates React, a widely used JavaScript\nlibrary for building user interfaces with an active contributor community. I\nexamine gender differences in metrics of robustness and innovation, as well as\nshifts in contribution patterns leading up to major version releases over 11\nyears of the React project. My results show that the exclusion of women is\ndetrimental to software as women contribute significantly more to feature\nenhancement and dependency management. By exploring how gender influences\ninnovation and robustness in the development of React, the study offers\ncritical insights into how increasing gender diversity could lead to more\ninclusive, innovative, and robust software.", "AI": {"tldr": "\u8be5\u7814\u7a76\u5206\u6790\u4e86React\u9879\u76ee\u4e2d\u6027\u522b\u591a\u6837\u6027\u5bf9\u8f6f\u4ef6\u5f00\u53d1\u7684\u5f71\u54cd\uff0c\u53d1\u73b0\u5973\u6027\u5728\u529f\u80fd\u589e\u5f3a\u548c\u4f9d\u8d56\u7ba1\u7406\u65b9\u9762\u8d21\u732e\u663e\u8457\uff0c\u6027\u522b\u6392\u65a5\u5bf9\u8f6f\u4ef6\u8d28\u91cf\u6709\u5bb3\u3002", "motivation": "\u5f00\u6e90\u8f6f\u4ef6\u8bbe\u8ba1\u4e2d\u867d\u7136\u63d0\u53ca\u5973\u6027\u5b58\u5728\uff0c\u4f46\u5f88\u5c11\u5173\u6ce8\u6027\u522b\u591a\u6837\u6027\u5982\u4f55\u4ece\u6839\u672c\u4e0a\u6539\u53d8\u5f00\u53d1\u6a21\u5f0f\uff0c\u56e0\u6b64\u7814\u7a76\u6027\u522b\u5305\u5bb9\u5bf9\u8f6f\u4ef6\u5f00\u53d1\u7684\u5b9e\u9645\u5f71\u54cd\u3002", "method": "\u7814\u7a76React\u9879\u76ee11\u5e74\u7684\u6570\u636e\uff0c\u5206\u6790\u6027\u522b\u5dee\u5f02\u5728\u7a33\u5065\u6027\u548c\u521b\u65b0\u6027\u6307\u6807\u4e0a\u7684\u8868\u73b0\uff0c\u4ee5\u53ca\u4e3b\u8981\u7248\u672c\u53d1\u5e03\u524d\u7684\u8d21\u732e\u6a21\u5f0f\u53d8\u5316\u3002", "result": "\u5973\u6027\u5728\u529f\u80fd\u589e\u5f3a\u548c\u4f9d\u8d56\u7ba1\u7406\u65b9\u9762\u8d21\u732e\u663e\u8457\u66f4\u591a\uff0c\u6027\u522b\u6392\u65a5\u5bf9\u8f6f\u4ef6\u8d28\u91cf\u4ea7\u751f\u8d1f\u9762\u5f71\u54cd\u3002", "conclusion": "\u589e\u52a0\u6027\u522b\u591a\u6837\u6027\u53ef\u4ee5\u5e26\u6765\u66f4\u5305\u5bb9\u3001\u521b\u65b0\u548c\u7a33\u5065\u7684\u8f6f\u4ef6\u3002"}}
{"id": "2510.15490", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.15490", "abs": "https://arxiv.org/abs/2510.15490", "authors": ["Diogo Landau", "Gijs Blanken", "Jorge Barbosa", "Nishant Saurabh"], "title": "Retrofitting Service Dependency Discovery in Distributed Systems", "comment": null, "summary": "Modern distributed systems rely on complex networks of interconnected\nservices, creating direct or indirect dependencies that can propagate faults\nand cause cascading failures. To localize the root cause of performance\ndegradation in these environments, constructing a service dependency graph is\nhighly beneficial. However, building an accurate service dependency graph is\nimpaired by complex routing techniques, such as Network Address Translation\n(NAT), an essential mechanism for connecting services across networks. NAT\nobfuscates the actual hosts running the services, causing existing run-time\napproaches that passively observe network metadata to fail in accurately\ninferring service dependencies. To this end, this paper introduces XXXX, a\nnovel run-time system for constructing process-level service dependency graphs.\nIt operates without source code instrumentation and remains resilient under\ncomplex network routing mechanisms, including NAT. XXXX implements a\nnon-disruptive method of injecting metadata onto a TCP packet's header that\nmaintains protocol correctness across host boundaries. In other words, if no\nreceiving agent is present, the instrumentation leaves existing TCP connections\nunaffected, ensuring non-disruptive operation when it is partially deployed\nacross hosts. We evaluated XXXX extensively against three state-of-the-art\nsystems across nine scenarios, involving three network configurations\n(NAT-free, internal-NAT, external-NAT) and three microservice benchmarks. XXXX\nwas the only approach that performed consistently across networking\nconfigurations. With regards to correctness, it performed on par with, or\nbetter than, the state-of-the-art with precision and recall values of 100% in\nthe majority of the scenarios.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u540d\u4e3aXXXX\u7684\u65b0\u578b\u8fd0\u884c\u65f6\u7cfb\u7edf\uff0c\u7528\u4e8e\u6784\u5efa\u8fdb\u7a0b\u7ea7\u670d\u52a1\u4f9d\u8d56\u56fe\uff0c\u80fd\u591f\u5728\u590d\u6742\u7f51\u7edc\u8def\u7531\u673a\u5236\uff08\u5305\u62ecNAT\uff09\u4e0b\u51c6\u786e\u63a8\u65ad\u670d\u52a1\u4f9d\u8d56\u5173\u7cfb\uff0c\u65e0\u9700\u6e90\u4ee3\u7801\u63d2\u6869\u3002", "motivation": "\u73b0\u4ee3\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u590d\u6742\u7684\u670d\u52a1\u4f9d\u8d56\u5173\u7cfb\u5bb9\u6613\u5bfc\u81f4\u7ea7\u8054\u6545\u969c\uff0c\u800cNAT\u7b49\u590d\u6742\u8def\u7531\u6280\u672f\u4f1a\u6a21\u7cca\u670d\u52a1\u7684\u5b9e\u9645\u4e3b\u673a\u4f4d\u7f6e\uff0c\u4f7f\u5f97\u73b0\u6709\u57fa\u4e8e\u7f51\u7edc\u5143\u6570\u636e\u7684\u8fd0\u884c\u65f6\u65b9\u6cd5\u65e0\u6cd5\u51c6\u786e\u63a8\u65ad\u670d\u52a1\u4f9d\u8d56\u5173\u7cfb\u3002", "method": "XXXX\u901a\u8fc7\u5728TCP\u5305\u5934\u4e2d\u975e\u7834\u574f\u6027\u5730\u6ce8\u5165\u5143\u6570\u636e\u6765\u7ef4\u62a4\u534f\u8bae\u6b63\u786e\u6027\uff0c\u5373\u4f7f\u63a5\u6536\u7aef\u6ca1\u6709\u4ee3\u7406\u4e5f\u4e0d\u4f1a\u5f71\u54cd\u73b0\u6709TCP\u8fde\u63a5\uff0c\u652f\u6301\u90e8\u5206\u90e8\u7f72\u3002", "result": "\u57289\u79cd\u573a\u666f\u4e0b\u7684\u8bc4\u4f30\u663e\u793a\uff0cXXXX\u662f\u552f\u4e00\u80fd\u5728\u4e0d\u540c\u7f51\u7edc\u914d\u7f6e\u4e0b\u4fdd\u6301\u7a33\u5b9a\u6027\u80fd\u7684\u65b9\u6cd5\uff0c\u5728\u5927\u591a\u6570\u573a\u666f\u4e0b\u7cbe\u786e\u7387\u548c\u53ec\u56de\u7387\u90fd\u8fbe\u5230100%\uff0c\u4f18\u4e8e\u6216\u4e0e\u73b0\u6709\u6700\u4f18\u65b9\u6cd5\u76f8\u5f53\u3002", "conclusion": "XXXX\u7cfb\u7edf\u80fd\u591f\u6709\u6548\u89e3\u51b3NAT\u73af\u5883\u4e0b\u7684\u670d\u52a1\u4f9d\u8d56\u56fe\u6784\u5efa\u95ee\u9898\uff0c\u63d0\u4f9b\u51c6\u786e\u4e14\u975e\u7834\u574f\u6027\u7684\u4f9d\u8d56\u5173\u7cfb\u63a8\u65ad\u80fd\u529b\u3002"}}
{"id": "2510.15690", "categories": ["cs.SE", "cs.CR"], "pdf": "https://arxiv.org/pdf/2510.15690", "abs": "https://arxiv.org/abs/2510.15690", "authors": ["Shiwen Ou", "Yuwei Li", "Lu Yu", "Chengkun Wei", "Tingke Wen", "Qiangpu Chen", "Yu Chen", "Haizhi Tang", "Zulie Pan"], "title": "MirrorFuzz: Leveraging LLM and Shared Bugs for Deep Learning Framework APIs Fuzzing", "comment": "Accepted for publication in IEEE Transactions on Software Engineering\n  (TSE), 2025", "summary": "Deep learning (DL) frameworks serve as the backbone for a wide range of\nartificial intelligence applications. However, bugs within DL frameworks can\ncascade into critical issues in higher-level applications, jeopardizing\nreliability and security. While numerous techniques have been proposed to\ndetect bugs in DL frameworks, research exploring common API patterns across\nframeworks and the potential risks they entail remains limited. Notably, many\nDL frameworks expose similar APIs with overlapping input parameters and\nfunctionalities, rendering them vulnerable to shared bugs, where a flaw in one\nAPI may extend to analogous APIs in other frameworks. To address this\nchallenge, we propose MirrorFuzz, an automated API fuzzing solution to discover\nshared bugs in DL frameworks. MirrorFuzz operates in three stages: First,\nMirrorFuzz collects historical bug data for each API within a DL framework to\nidentify potentially buggy APIs. Second, it matches each buggy API in a\nspecific framework with similar APIs within and across other DL frameworks.\nThird, it employs large language models (LLMs) to synthesize code for the API\nunder test, leveraging the historical bug data of similar APIs to trigger\nanalogous bugs across APIs. We implement MirrorFuzz and evaluate it on four\npopular DL frameworks (TensorFlow, PyTorch, OneFlow, and Jittor). Extensive\nevaluation demonstrates that MirrorFuzz improves code coverage by 39.92\\% and\n98.20\\% compared to state-of-the-art methods on TensorFlow and PyTorch,\nrespectively. Moreover, MirrorFuzz discovers 315 bugs, 262 of which are newly\nfound, and 80 bugs are fixed, with 52 of these bugs assigned CNVD IDs.", "AI": {"tldr": "MirrorFuzz\u662f\u4e00\u4e2a\u81ea\u52a8\u5316API\u6a21\u7cca\u6d4b\u8bd5\u89e3\u51b3\u65b9\u6848\uff0c\u7528\u4e8e\u53d1\u73b0\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u4e2d\u7684\u5171\u4eabbug\u3002\u5b83\u901a\u8fc7\u6536\u96c6\u5386\u53f2bug\u6570\u636e\u3001\u5339\u914d\u76f8\u4f3cAPI\u4ee5\u53ca\u4f7f\u7528LLM\u751f\u6210\u6d4b\u8bd5\u4ee3\u7801\uff0c\u5728\u56db\u4e2a\u6d41\u884cDL\u6846\u67b6\u4e2d\u53d1\u73b0\u4e86315\u4e2abug\u3002", "motivation": "\u6df1\u5ea6\u5b66\u4e60\u6846\u67b6\u4e2d\u7684bug\u4f1a\u7ea7\u8054\u5f71\u54cd\u4e0a\u5c42\u5e94\u7528\uff0c\u4f46\u73b0\u6709\u7814\u7a76\u5bf9\u8de8\u6846\u67b6API\u5171\u4eabbug\u6a21\u5f0f\u63a2\u7d22\u6709\u9650\u3002\u8bb8\u591aDL\u6846\u67b6\u66b4\u9732\u76f8\u4f3cAPI\uff0c\u5b58\u5728\u5171\u4eab\u6f0f\u6d1e\u98ce\u9669\u3002", "method": "\u4e09\u9636\u6bb5\u65b9\u6cd5\uff1a1)\u6536\u96c6\u5404API\u5386\u53f2bug\u6570\u636e\u8bc6\u522b\u6f5c\u5728buggy API\uff1b2)\u5728\u6846\u67b6\u5185\u548c\u8de8\u6846\u67b6\u5339\u914d\u76f8\u4f3cAPI\uff1b3)\u4f7f\u7528LLM\u57fa\u4e8e\u76f8\u4f3cAPI\u5386\u53f2bug\u6570\u636e\u5408\u6210\u6d4b\u8bd5\u4ee3\u7801\u89e6\u53d1\u7c7b\u6bd4bug\u3002", "result": "\u5728TensorFlow\u3001PyTorch\u3001OneFlow\u548cJittor\u4e0a\u8bc4\u4f30\uff0c\u4ee3\u7801\u8986\u76d6\u7387\u5206\u522b\u63d0\u534739.92%\u548c98.20%\u3002\u53d1\u73b0315\u4e2abug\uff0c\u5176\u4e2d262\u4e2a\u662f\u65b0bug\uff0c80\u4e2a\u5df2\u4fee\u590d\uff0c52\u4e2a\u83b7\u5f97CNVD ID\u3002", "conclusion": "MirrorFuzz\u80fd\u6709\u6548\u53d1\u73b0DL\u6846\u67b6\u4e2d\u7684\u5171\u4eabbug\uff0c\u8bc1\u660e\u4e86\u8de8\u6846\u67b6API\u76f8\u4f3c\u6027\u5206\u6790\u5728bug\u68c0\u6d4b\u4e2d\u7684\u91cd\u8981\u6027\u3002"}}
{"id": "2510.15596", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.15596", "abs": "https://arxiv.org/abs/2510.15596", "authors": ["Alicia Golden", "Michael Kuchnik", "Samuel Hsia", "Zachary DeVito", "Gu-Yeon Wei", "David Brooks", "Carole-Jean Wu"], "title": "PRISM: Probabilistic Runtime Insights and Scalable Performance Modeling for Large-Scale Distributed Training", "comment": null, "summary": "Large model training beyond tens of thousands of GPUs is an uncharted\nterritory. At such scales, disruptions to the training process are not a matter\nof if, but a matter of when -- a stochastic process degrading training\nproductivity. Dynamic runtime variation will become increasingly more frequent\nas training scales up and GPUs are operated in increasingly power-limited and\nthermally-stressed environments. At the 64k GPU scale, we already observed 9%\nGPU time variability for frontier foundation model training. To understand\npotential causes of variability, we analyze GPU microbenchmarks at scale across\na variety of platforms, showing up to 14% variation in GPU performance on GEMM\nworkloads depending on training hardware and deployed environment.\n  Motivated by our analysis and the large design space around performance\nvariability, we present PRISM -- a performance modeling framework that\nconsiders the stochastic nature of the large-scale distributed training. The\ncore of PRISM is the statistical method that provides a quantifiable measure\nfor probabilistic guarantees on training time. Using PRISM, we explore the\ndesign and optimization space of distributed training, from parallelization\nmethods to next-generation training systems. PRISM is validated with\nreal-system measurement, showing training time prediction accuracy with 20.8%\nKolmogorov-Smirnov distance. Using PRISM, we demonstrate that, depending on\ncomputation node placement, up to 1.26x performance improvement potential is\navailable if we factor in sensitivities of parallelization strategies to\nvariation. In addition, we use PRISM to identify kernels to optimize for\nreducing performance variability and predict probability of slow-down for\nlarge-scale jobs where variation is magnified. We find optimizing communication\nkernels, such as AllGather and ReduceScatter, contribute most to minimizing\nvariability in training step time.", "AI": {"tldr": "PRISM\u662f\u4e00\u4e2a\u6027\u80fd\u5efa\u6a21\u6846\u67b6\uff0c\u4e13\u95e8\u9488\u5bf9\u5927\u89c4\u6a21\u5206\u5e03\u5f0f\u8bad\u7ec3\u4e2d\u7684\u6027\u80fd\u53d8\u5f02\u6027\u95ee\u9898\uff0c\u901a\u8fc7\u7edf\u8ba1\u65b9\u6cd5\u63d0\u4f9b\u8bad\u7ec3\u65f6\u95f4\u7684\u6982\u7387\u4fdd\u8bc1\uff0c\u5e76\u63a2\u7d22\u8bad\u7ec3\u7cfb\u7edf\u7684\u8bbe\u8ba1\u548c\u4f18\u5316\u7a7a\u95f4\u3002", "motivation": "\u5728\u6570\u4e07GPU\u89c4\u6a21\u7684\u5927\u6a21\u578b\u8bad\u7ec3\u4e2d\uff0c\u6027\u80fd\u53d8\u5f02\u6027\u4e0d\u53ef\u907f\u514d\uff0c\u4f1a\u964d\u4f4e\u8bad\u7ec3\u6548\u7387\u3002\u572864k GPU\u89c4\u6a21\u4e0b\u5df2\u89c2\u5bdf\u52309%\u7684GPU\u65f6\u95f4\u53d8\u5f02\u6027\uff0c\u9700\u8981\u7406\u89e3\u53d8\u5f02\u6027\u539f\u56e0\u5e76\u4f18\u5316\u8bad\u7ec3\u7cfb\u7edf\u3002", "method": "\u63d0\u51faPRISM\u6027\u80fd\u5efa\u6a21\u6846\u67b6\uff0c\u91c7\u7528\u7edf\u8ba1\u65b9\u6cd5\u91cf\u5316\u8bad\u7ec3\u65f6\u95f4\u7684\u6982\u7387\u4fdd\u8bc1\u3002\u901a\u8fc7GPU\u5fae\u57fa\u51c6\u6d4b\u8bd5\u5206\u6790\u4e0d\u540c\u5e73\u53f0\u4e0a\u7684\u6027\u80fd\u53d8\u5f02\u6027\uff0c\u5e76\u4f7f\u7528\u771f\u5b9e\u7cfb\u7edf\u6d4b\u91cf\u9a8c\u8bc1\u6a21\u578b\u51c6\u786e\u6027\u3002", "result": "PRISM\u7684\u8bad\u7ec3\u65f6\u95f4\u9884\u6d4b\u51c6\u786e\u7387\u8fbe\u523020.8% Kolmogorov-Smirnov\u8ddd\u79bb\u3002\u7814\u7a76\u8868\u660e\uff0c\u901a\u8fc7\u4f18\u5316\u8ba1\u7b97\u8282\u70b9\u5e03\u5c40\u53ef\u83b7\u5f971.26\u500d\u6027\u80fd\u63d0\u5347\u6f5c\u529b\uff0c\u901a\u4fe1\u5185\u6838\uff08\u5982AllGather\u548cReduceScatter\uff09\u7684\u4f18\u5316\u5bf9\u51cf\u5c11\u8bad\u7ec3\u6b65\u9aa4\u65f6\u95f4\u53d8\u5f02\u6027\u8d21\u732e\u6700\u5927\u3002", "conclusion": "\u5927\u89c4\u6a21\u5206\u5e03\u5f0f\u8bad\u7ec3\u5fc5\u987b\u8003\u8651\u6027\u80fd\u53d8\u5f02\u6027\uff0cPRISM\u6846\u67b6\u4e3a\u8bad\u7ec3\u7cfb\u7edf\u8bbe\u8ba1\u548c\u4f18\u5316\u63d0\u4f9b\u4e86\u6709\u6548\u5de5\u5177\uff0c\u901a\u4fe1\u5185\u6838\u4f18\u5316\u662f\u51cf\u5c11\u53d8\u5f02\u6027\u7684\u5173\u952e\u3002"}}
{"id": "2510.15767", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.15767", "abs": "https://arxiv.org/abs/2510.15767", "authors": ["Rathi Adarshi Rammohan", "Moritz Meier", "Dennis K\u00fcster", "Tanja Schultz"], "title": "EASELAN: An Open-Source Framework for Multimodal Biosignal Annotation and Data Management", "comment": null, "summary": "Recent advancements in machine learning and adaptive cognitive systems are\ndriving a growing demand for large and richly annotated multimodal data. A\nprominent example of this trend are fusion models, which increasingly\nincorporate multiple biosignals in addition to traditional audiovisual\nchannels. This paper introduces the EASELAN annotation framework to improve\nannotation workflows designed to address the resulting rising complexity of\nmultimodal and biosignals datasets. It builds on the robust ELAN tool by adding\nnew components tailored to support all stages of the annotation pipeline: From\nstreamlining the preparation of annotation files to setting up additional\nchannels, integrated version control with GitHub, and simplified\npost-processing. EASELAN delivers a seamless workflow designed to integrate\nbiosignals and facilitate rich annotations to be readily exported for further\nanalyses and machine learning-supported model training. The EASELAN framework\nis successfully applied to a high-dimensional biosignals collection initiative\non human everyday activities (here, table setting) for cognitive robots within\nthe DFG-funded Collaborative Research Center 1320 Everyday Activity Science and\nEngineering (EASE). In this paper we discuss the opportunities, limitations,\nand lessons learned when using EASELAN for this initiative. To foster research\non biosignal collection, annotation, and processing, the code of EASELAN is\npublicly available(https://github.com/cognitive-systems-lab/easelan), along\nwith the EASELAN-supported fully annotated Table Setting Database.", "AI": {"tldr": "EASELAN\u662f\u4e00\u4e2a\u57fa\u4e8eELAN\u7684\u591a\u6a21\u6001\u751f\u7269\u4fe1\u53f7\u6807\u6ce8\u6846\u67b6\uff0c\u901a\u8fc7\u7b80\u5316\u6807\u6ce8\u6d41\u7a0b\u3001\u96c6\u6210GitHub\u7248\u672c\u63a7\u5236\u548c\u7b80\u5316\u540e\u5904\u7406\uff0c\u652f\u6301\u751f\u7269\u4fe1\u53f7\u4e0e\u89c6\u542c\u6570\u636e\u7684\u878d\u5408\u6807\u6ce8\uff0c\u5e94\u7528\u4e8e\u8ba4\u77e5\u673a\u5668\u4eba\u65e5\u5e38\u6d3b\u52a8\u7814\u7a76\u3002", "motivation": "\u968f\u7740\u673a\u5668\u5b66\u4e60\u548c\u81ea\u9002\u5e94\u8ba4\u77e5\u7cfb\u7edf\u7684\u53d1\u5c55\uff0c\u5bf9\u5927\u89c4\u6a21\u591a\u6a21\u6001\u6807\u6ce8\u6570\u636e\u7684\u9700\u6c42\u65e5\u76ca\u589e\u957f\uff0c\u7279\u522b\u662f\u878d\u5408\u751f\u7269\u4fe1\u53f7\u7684\u590d\u6742\u6570\u636e\u96c6\u9700\u8981\u66f4\u9ad8\u6548\u7684\u6807\u6ce8\u5de5\u5177\u3002", "method": "\u5728ELAN\u5de5\u5177\u57fa\u7840\u4e0a\u5f00\u53d1EASELAN\u6846\u67b6\uff0c\u589e\u52a0\u652f\u6301\u6807\u6ce8\u6d41\u7a0b\u5404\u9636\u6bb5\u7684\u65b0\u7ec4\u4ef6\uff1a\u4ece\u6807\u6ce8\u6587\u4ef6\u51c6\u5907\u3001\u989d\u5916\u901a\u9053\u8bbe\u7f6e\u3001\u96c6\u6210GitHub\u7248\u672c\u63a7\u5236\u5230\u7b80\u5316\u540e\u5904\u7406\u3002", "result": "\u6210\u529f\u5e94\u7528\u4e8eDFG\u8d44\u52a9\u7684EASE\u9879\u76ee\u4e2d\u7684\u4eba\u7c7b\u65e5\u5e38\u6d3b\u52a8\uff08\u6446\u684c\u5b50\uff09\u9ad8\u7ef4\u751f\u7269\u4fe1\u53f7\u91c7\u96c6\uff0c\u521b\u5efa\u4e86\u5b8c\u6574\u7684Table Setting Database\uff0c\u4ee3\u7801\u548c\u6807\u6ce8\u6570\u636e\u5e93\u5df2\u516c\u5f00\u3002", "conclusion": "EASELAN\u4e3a\u751f\u7269\u4fe1\u53f7\u91c7\u96c6\u3001\u6807\u6ce8\u548c\u5904\u7406\u7814\u7a76\u63d0\u4f9b\u4e86\u6709\u6548\u5de5\u5177\uff0c\u8ba8\u8bba\u4e86\u4f7f\u7528\u4e2d\u7684\u673a\u9047\u3001\u9650\u5236\u548c\u7ecf\u9a8c\u6559\u8bad\uff0c\u4fc3\u8fdb\u4e86\u591a\u6a21\u6001\u6570\u636e\u6807\u6ce8\u5de5\u4f5c\u6d41\u7a0b\u7684\u6539\u8fdb\u3002"}}
{"id": "2510.15652", "categories": ["cs.DC", "cs.LG"], "pdf": "https://arxiv.org/pdf/2510.15652", "abs": "https://arxiv.org/abs/2510.15652", "authors": ["Ahmad Raeisi", "Mahdi Dolati", "Sina Darabi", "Sadegh Talebi", "Patrick Eugster", "Ahmad Khonsari"], "title": "GOGH: Correlation-Guided Orchestration of GPUs in Heterogeneous Clusters", "comment": "10 pages, 5 figures", "summary": "The growing demand for computational resources in machine learning has made\nefficient resource allocation a critical challenge, especially in heterogeneous\nhardware clusters where devices vary in capability, age, and energy efficiency.\nUpgrading to the latest hardware is often infeasible, making sustainable use of\nexisting, mixed-generation resources essential. In this paper, we propose a\nlearning-based architecture for managing machine learning workloads in\nheterogeneous clusters. The system operates online, allocating resources to\nincoming training or inference requests while minimizing energy consumption and\nmeeting performance requirements. It uses two neural networks: the first\nprovides initial estimates of how well a new model will utilize different\nhardware types and how it will affect co-located models. An optimizer then\nallocates resources based on these estimates. After deployment, the system\nmonitors real performance and uses this data to refine its predictions via a\nsecond neural network. This updated model improves estimates not only for the\ncurrent hardware but also for hardware not initially allocated and for\nco-location scenarios not yet observed. The result is an adaptive, iterative\napproach that learns over time to make more effective resource allocation\ndecisions in heterogeneous deep learning clusters.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8e\u5b66\u4e60\u7684\u5f02\u6784\u96c6\u7fa4\u8d44\u6e90\u7ba1\u7406\u67b6\u6784\uff0c\u4f7f\u7528\u4e24\u4e2a\u795e\u7ecf\u7f51\u7edc\u6765\u4f18\u5316\u673a\u5668\u5b66\u4e60\u5de5\u4f5c\u8d1f\u8f7d\u7684\u8d44\u6e90\u5206\u914d\uff0c\u964d\u4f4e\u80fd\u8017\u5e76\u6ee1\u8db3\u6027\u80fd\u8981\u6c42\u3002", "motivation": "\u673a\u5668\u5b66\u4e60\u5bf9\u8ba1\u7b97\u8d44\u6e90\u7684\u9700\u6c42\u65e5\u76ca\u589e\u957f\uff0c\u5728\u5f02\u6784\u786c\u4ef6\u96c6\u7fa4\u4e2d\u9ad8\u6548\u5206\u914d\u8d44\u6e90\u6210\u4e3a\u5173\u952e\u6311\u6218\u3002\u7531\u4e8e\u5347\u7ea7\u5230\u6700\u65b0\u786c\u4ef6\u5f80\u5f80\u4e0d\u53ef\u884c\uff0c\u53ef\u6301\u7eed\u5229\u7528\u73b0\u6709\u6df7\u5408\u4ee3\u9645\u8d44\u6e90\u53d8\u5f97\u81f3\u5173\u91cd\u8981\u3002", "method": "\u7cfb\u7edf\u91c7\u7528\u5728\u7ebf\u8fd0\u884c\u65b9\u5f0f\uff0c\u4f7f\u7528\u4e24\u4e2a\u795e\u7ecf\u7f51\u7edc\uff1a\u7b2c\u4e00\u4e2a\u63d0\u4f9b\u65b0\u6a21\u578b\u5728\u4e0d\u540c\u786c\u4ef6\u4e0a\u7684\u521d\u59cb\u6027\u80fd\u4f30\u8ba1\u548c\u5171\u7f6e\u5f71\u54cd\uff1b\u4f18\u5316\u5668\u57fa\u4e8e\u8fd9\u4e9b\u4f30\u8ba1\u5206\u914d\u8d44\u6e90\uff1b\u90e8\u7f72\u540e\u901a\u8fc7\u7b2c\u4e8c\u4e2a\u795e\u7ecf\u7f51\u7edc\u76d1\u63a7\u5b9e\u9645\u6027\u80fd\u5e76\u6539\u8fdb\u9884\u6d4b\u3002", "result": "\u8be5\u65b9\u6cd5\u80fd\u591f\u81ea\u9002\u5e94\u5730\u5b66\u4e60\uff0c\u968f\u65f6\u95f4\u63a8\u79fb\u5728\u5f02\u6784\u6df1\u5ea6\u5b66\u4e60\u96c6\u7fa4\u4e2d\u505a\u51fa\u66f4\u6709\u6548\u7684\u8d44\u6e90\u5206\u914d\u51b3\u7b56\uff0c\u6539\u8fdb\u5bf9\u672a\u5206\u914d\u786c\u4ef6\u548c\u672a\u89c2\u5bdf\u5171\u7f6e\u573a\u666f\u7684\u4f30\u8ba1\u3002", "conclusion": "\u63d0\u51fa\u7684\u8fed\u4ee3\u5b66\u4e60\u65b9\u6cd5\u80fd\u591f\u5728\u5f02\u6784\u786c\u4ef6\u96c6\u7fa4\u4e2d\u6709\u6548\u7ba1\u7406\u673a\u5668\u5b66\u4e60\u5de5\u4f5c\u8d1f\u8f7d\uff0c\u5b9e\u73b0\u80fd\u8017\u6700\u5c0f\u5316\u548c\u6027\u80fd\u8981\u6c42\u6ee1\u8db3\uff0c\u4e3a\u53ef\u6301\u7eed\u5229\u7528\u73b0\u6709\u8d44\u6e90\u63d0\u4f9b\u4e86\u53ef\u884c\u65b9\u6848\u3002"}}
{"id": "2510.15794", "categories": ["cs.SE"], "pdf": "https://arxiv.org/pdf/2510.15794", "abs": "https://arxiv.org/abs/2510.15794", "authors": ["Rachna Raj", "Diego Elias Costa"], "title": "Towards Supporting Open Source Library Maintainers with Community-Based Analytics", "comment": null, "summary": "Open-source software (OSS) is a pillar of modern software development. Its\nsuccess depends on the dedication of maintainers who work constantly to keep\ntheir libraries stable, adapt to changing needs, and support a growing\ncommunity. Yet, they receive little to no continuous feedback on how the\nprojects that rely on their libraries actually use their APIs. We believe that\ngaining these insights can help maintainers make better decisions, such as\nrefining testing strategies, understanding the impact of changes, and guiding\nthe evolution of their libraries more effectively. We propose the use of\ncommunity-based analytics to analyze how an OSS library is used across its\ndependent ecosystem. We conduct an empirical study of 10 popular Java libraries\nand each with their respective dependent ecosystem of 50 projects. Our results\nreveal that while library developers offer a wide range of API methods, only\n16% on average are actively used by their dependent ecosystem. Moreover, only\n74% of the used API methods are partially or fully covered by their library\ntest suite. We propose two metrics to help developers evaluate their test suite\naccording to the APIs used by their community, and we conduct a survey on\nopen-source practitioners to assess the practical value of these insights in\nguiding maintenance decisions.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u793e\u533a\u5206\u6790\u65b9\u6cd5\u6765\u8ffd\u8e2a\u5f00\u6e90\u5e93\u5728\u5176\u4f9d\u8d56\u751f\u6001\u7cfb\u7edf\u4e2d\u7684\u4f7f\u7528\u60c5\u51b5\uff0c\u53d1\u73b0\u5e73\u5747\u53ea\u670916%\u7684API\u65b9\u6cd5\u88ab\u5b9e\u9645\u4f7f\u7528\uff0c\u4e14\u4ec5\u670974%\u7684\u88ab\u4f7f\u7528API\u65b9\u6cd5\u5728\u6d4b\u8bd5\u5957\u4ef6\u4e2d\u5f97\u5230\u4e86\u90e8\u5206\u6216\u5b8c\u5168\u8986\u76d6\u3002", "motivation": "\u5f00\u6e90\u8f6f\u4ef6\u7ef4\u62a4\u8005\u7f3a\u4e4f\u5173\u4e8e\u5176\u5e93\u5728\u5b9e\u9645\u9879\u76ee\u4e2d\u5982\u4f55\u88ab\u4f7f\u7528\u7684\u6301\u7eed\u53cd\u9988\uff0c\u8fd9\u4e9b\u6d1e\u5bdf\u80fd\u5e2e\u52a9\u4ed6\u4eec\u6539\u8fdb\u6d4b\u8bd5\u7b56\u7565\u3001\u7406\u89e3\u53d8\u66f4\u5f71\u54cd\u5e76\u66f4\u6709\u6548\u5730\u6307\u5bfc\u5e93\u7684\u6f14\u8fdb\u3002", "method": "\u5bf910\u4e2a\u6d41\u884cJava\u5e93\u53ca\u5176\u5404\u81ea50\u4e2a\u4f9d\u8d56\u9879\u76ee\u8fdb\u884c\u5b9e\u8bc1\u7814\u7a76\uff0c\u63d0\u51fa\u57fa\u4e8e\u793e\u533a\u4f7f\u7528\u7684\u6d4b\u8bd5\u8bc4\u4f30\u6307\u6807\uff0c\u5e76\u5bf9\u5f00\u6e90\u5b9e\u8df5\u8005\u8fdb\u884c\u8c03\u7814\u3002", "result": "\u7814\u7a76\u53d1\u73b0\u5e93\u5f00\u53d1\u8005\u63d0\u4f9b\u7684API\u65b9\u6cd5\u4e2d\u5e73\u5747\u53ea\u670916%\u88ab\u4f9d\u8d56\u751f\u6001\u7cfb\u7edf\u5b9e\u9645\u4f7f\u7528\uff0c\u4e14\u53ea\u670974%\u7684\u88ab\u4f7f\u7528API\u65b9\u6cd5\u5728\u6d4b\u8bd5\u5957\u4ef6\u4e2d\u6709\u8986\u76d6\u3002", "conclusion": "\u793e\u533a\u5206\u6790\u80fd\u4e3a\u7ef4\u62a4\u8005\u63d0\u4f9b\u6709\u4ef7\u503c\u7684\u6d1e\u5bdf\uff0c\u5e2e\u52a9\u4ed6\u4eec\u6839\u636e\u5b9e\u9645\u4f7f\u7528\u60c5\u51b5\u4f18\u5316\u6d4b\u8bd5\u7b56\u7565\u548c\u5e93\u7684\u6f14\u8fdb\u65b9\u5411\u3002"}}
{"id": "2510.15698", "categories": ["cs.DC"], "pdf": "https://arxiv.org/pdf/2510.15698", "abs": "https://arxiv.org/abs/2510.15698", "authors": ["Sebastian Brandt", "Tim G\u00f6ttlicher"], "title": "A Post-Quantum Lower Bound for the Distributed Lov\u00e1sz Local Lemma", "comment": "46 pages, 3 figures", "summary": "In this work, we study the Lov\\'asz local lemma (LLL) problem in the area of\ndistributed quantum computing, which has been the focus of attention of recent\nadvances in quantum computing [STOC'24, STOC'25, STOC'25]. We prove a lower\nbound of $2^{\\Omega(\\log^* n)}$ for the complexity of the distributed LLL in\nthe quantum-LOCAL model. More specifically, we obtain our lower bound already\nfor a very well-studied special case of the LLL, called sinkless orientation,\nin a stronger model than quantum-LOCAL, called the randomized online-LOCAL\nmodel. As a consequence, we obtain the same lower bounds for sinkless\norientation and the distributed LLL also in a variety of other models studied\nacross different research communities.\n  Our work provides the first superconstant lower bound for sinkless\norientation and the distributed LLL in all of these models, addressing recently\nstated open questions. Moreover, to obtain our results, we develop an entirely\nnew lower bound technique that we believe has the potential to become the first\ngeneric technique for proving post-quantum lower bounds for many of the most\nimportant problems studied in the context of locality.", "AI": {"tldr": "\u672c\u6587\u5728\u5206\u5e03\u5f0f\u91cf\u5b50\u8ba1\u7b97\u9886\u57df\u7814\u7a76\u4e86Lov\u00e1sz\u5c40\u90e8\u5f15\u7406\u95ee\u9898\uff0c\u8bc1\u660e\u4e86\u91cf\u5b50LOCAL\u6a21\u578b\u4e2d\u5206\u5e03\u5f0fLLL\u7684\u590d\u6742\u5ea6\u4e0b\u754c\u4e3a2^\u03a9(log* n)\uff0c\u8fd9\u662f\u8be5\u95ee\u9898\u5728\u591a\u79cd\u6a21\u578b\u4e2d\u7684\u9996\u4e2a\u8d85\u5e38\u6570\u4e0b\u754c\u3002", "motivation": "\u8fd1\u5e74\u6765\u91cf\u5b50\u8ba1\u7b97\u5728STOC\u4f1a\u8bae\u4e0a\u53d6\u5f97\u91cd\u8981\u8fdb\u5c55\uff0c\u4f46\u5206\u5e03\u5f0f\u91cf\u5b50\u8ba1\u7b97\u4e2d\u7684Lov\u00e1sz\u5c40\u90e8\u5f15\u7406\u95ee\u9898\u5c1a\u672a\u5f97\u5230\u5145\u5206\u7814\u7a76\u3002\u672c\u6587\u65e8\u5728\u586b\u8865\u8fd9\u4e00\u7a7a\u767d\uff0c\u4e3a\u5206\u5e03\u5f0fLLL\u95ee\u9898\u63d0\u4f9b\u9996\u4e2a\u8d85\u5e38\u6570\u4e0b\u754c\u3002", "method": "\u901a\u8fc7\u7814\u7a76LLL\u7684\u4e00\u4e2a\u7279\u4f8b\u2014\u2014\u65e0\u6c47\u70b9\u5b9a\u5411\u95ee\u9898\uff0c\u5728\u6bd4\u91cf\u5b50LOCAL\u66f4\u5f3a\u7684\u968f\u673a\u5728\u7ebfLOCAL\u6a21\u578b\u4e2d\u5efa\u7acb\u4e0b\u754c\u3002\u5f00\u53d1\u4e86\u5168\u65b0\u7684\u4e0b\u754c\u8bc1\u660e\u6280\u672f\uff0c\u8fd9\u662f\u9996\u4e2a\u9002\u7528\u4e8e\u540e\u91cf\u5b50\u73af\u5883\u4e0b\u5c40\u90e8\u6027\u95ee\u9898\u7684\u901a\u7528\u6280\u672f\u3002", "result": "\u8bc1\u660e\u4e86\u5206\u5e03\u5f0fLLL\u548c\u65e0\u6c47\u70b9\u5b9a\u5411\u95ee\u9898\u7684\u590d\u6742\u5ea6\u4e0b\u754c\u4e3a2^\u03a9(log* n)\uff0c\u8fd9\u662f\u8be5\u95ee\u9898\u5728\u591a\u79cd\u7814\u7a76\u6a21\u578b\u4e2d\u9996\u6b21\u83b7\u5f97\u7684\u8d85\u5e38\u6570\u4e0b\u754c\uff0c\u89e3\u51b3\u4e86\u8fd1\u671f\u63d0\u51fa\u7684\u5f00\u653e\u6027\u95ee\u9898\u3002", "conclusion": "\u672c\u6587\u4e0d\u4ec5\u4e3a\u5206\u5e03\u5f0f\u91cf\u5b50\u8ba1\u7b97\u4e2d\u7684LLL\u95ee\u9898\u63d0\u4f9b\u4e86\u9996\u4e2a\u8d85\u5e38\u6570\u4e0b\u754c\uff0c\u8fd8\u5f00\u53d1\u4e86\u5177\u6709\u5e7f\u6cdb\u5e94\u7528\u6f5c\u529b\u7684\u65b0\u4e0b\u754c\u8bc1\u660e\u6280\u672f\uff0c\u4e3a\u540e\u91cf\u5b50\u65f6\u4ee3\u7684\u5c40\u90e8\u6027\u95ee\u9898\u7814\u7a76\u5960\u5b9a\u4e86\u57fa\u7840\u3002"}}
{"id": "2510.15755", "categories": ["cs.DC", "cs.OS"], "pdf": "https://arxiv.org/pdf/2510.15755", "abs": "https://arxiv.org/abs/2510.15755", "authors": ["Atsushi Koshiba", "Charalampos Mainas", "Pramod Bhatotia"], "title": "Funky: Cloud-Native FPGA Virtualization and Orchestration", "comment": "17 pages, ACM Symposium on Cloud Computing (SoCC'25)", "summary": "The adoption of FPGAs in cloud-native environments is facing impediments due\nto FPGA limitations and CPU-oriented design of orchestrators, as they lack\nvirtualization, isolation, and preemption support for FPGAs. Consequently,\ncloud providers offer no orchestration services for FPGAs, leading to low\nscalability, flexibility, and resiliency.\n  This paper presents Funky, a full-stack FPGA-aware orchestration engine for\ncloud-native applications. Funky offers primary orchestration services for FPGA\nworkloads to achieve high performance, utilization, scalability, and fault\ntolerance, accomplished by three contributions: (1) FPGA virtualization for\nlightweight sandboxes, (2) FPGA state management enabling task preemption and\ncheckpointing, and (3) FPGA-aware orchestration components following the\nindustry-standard CRI/OCI specifications.\n  We implement and evaluate Funky using four x86 servers with Alveo U50 FPGA\ncards. Our evaluation highlights that Funky allows us to port 23 OpenCL\napplications from the Xilinx Vitis and Rosetta benchmark suites by modifying\n3.4% of the source code while keeping the OCI image sizes 28.7 times smaller\nthan AMD's FPGA-accessible Docker containers. In addition, Funky incurs only\n7.4% performance overheads compared to native execution, while providing\nvirtualization support with strong hypervisor-enforced isolation and\ncloud-native orchestration for a set of distributed FPGAs. Lastly, we evaluate\nFunky's orchestration services in a large-scale cluster using Google production\ntraces, showing its scalability, fault tolerance, and scheduling efficiency.", "AI": {"tldr": "Funky\u662f\u4e00\u4e2a\u9762\u5411\u4e91\u539f\u751f\u5e94\u7528\u7684FPGA\u611f\u77e5\u7f16\u6392\u5f15\u64ce\uff0c\u901a\u8fc7FPGA\u865a\u62df\u5316\u3001\u72b6\u6001\u7ba1\u7406\u548c\u7f16\u6392\u7ec4\u4ef6\u89e3\u51b3\u4e86FPGA\u5728\u4e91\u73af\u5883\u4e2d\u7684\u7f16\u6392\u95ee\u9898\uff0c\u5b9e\u73b0\u4e86\u9ad8\u6027\u80fd\u3001\u9ad8\u5229\u7528\u7387\u548c\u5bb9\u9519\u80fd\u529b\u3002", "motivation": "FPGA\u5728\u4e91\u539f\u751f\u73af\u5883\u4e2d\u7684\u91c7\u7528\u9762\u4e34\u969c\u788d\uff0c\u56e0\u4e3aFPGA\u7f3a\u4e4f\u865a\u62df\u5316\u3001\u9694\u79bb\u548c\u62a2\u5360\u652f\u6301\uff0c\u5bfc\u81f4\u4e91\u63d0\u4f9b\u5546\u65e0\u6cd5\u63d0\u4f9bFPGA\u7f16\u6392\u670d\u52a1\uff0c\u9020\u6210\u53ef\u6269\u5c55\u6027\u3001\u7075\u6d3b\u6027\u548c\u5f39\u6027\u4e0d\u8db3\u3002", "method": "Funky\u901a\u8fc7\u4e09\u4e2a\u4e3b\u8981\u8d21\u732e\u5b9e\u73b0FPGA\u7f16\u6392\uff1a(1) FPGA\u865a\u62df\u5316\u521b\u5efa\u8f7b\u91cf\u7ea7\u6c99\u7bb1\uff0c(2) FPGA\u72b6\u6001\u7ba1\u7406\u652f\u6301\u4efb\u52a1\u62a2\u5360\u548c\u68c0\u67e5\u70b9\uff0c(3) \u9075\u5faaCRI/OCI\u6807\u51c6\u7684FPGA\u611f\u77e5\u7f16\u6392\u7ec4\u4ef6\u3002", "result": "\u57284\u53f0x86\u670d\u52a1\u5668\u548cAlveo U50 FPGA\u5361\u4e0a\u7684\u8bc4\u4f30\u663e\u793a\uff0cFunky\u80fd\u591f\u79fb\u690d23\u4e2aOpenCL\u5e94\u7528\uff0c\u4ec5\u4fee\u65393.4%\u6e90\u4ee3\u7801\uff0cOCI\u955c\u50cf\u6bd4AMD\u7684FPGA Docker\u5bb9\u5668\u5c0f28.7\u500d\uff0c\u6027\u80fd\u5f00\u9500\u4ec57.4%\uff0c\u5e76\u63d0\u4f9b\u5f3a\u9694\u79bb\u548c\u5206\u5e03\u5f0fFPGA\u7f16\u6392\u3002", "conclusion": "Funky\u901a\u8fc7\u5927\u89c4\u6a21\u96c6\u7fa4\u6d4b\u8bd5\u9a8c\u8bc1\u4e86\u5176\u53ef\u6269\u5c55\u6027\u3001\u5bb9\u9519\u80fd\u529b\u548c\u8c03\u5ea6\u6548\u7387\uff0c\u4e3a\u4e91\u539f\u751f\u73af\u5883\u4e2d\u7684FPGA\u7f16\u6392\u63d0\u4f9b\u4e86\u6709\u6548\u89e3\u51b3\u65b9\u6848\u3002"}}
